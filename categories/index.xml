<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Categories on krashanoff</title><link>https://krashanoff.com/categories/</link><description>Recent content in Categories on krashanoff</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://krashanoff.com/categories/index.xml" rel="self" type="application/rss+xml"/><item><title>Idiomatic Semantics in Golang</title><link>https://krashanoff.com/2021/11/08/idiomatic-semantics-in-golang/</link><pubDate>Mon, 08 Nov 2021 00:00:00 -0700</pubDate><guid>https://krashanoff.com/2021/11/08/idiomatic-semantics-in-golang/</guid><description>&lt;p>I have a complicated relationship with Go as a programming language. There’s a lot at its disposal , but only at expense of throwing oneself at the mercy of the language designers. What I want to talk about is a very particular part of Go that they like to stress as a coding methodology adopted into the language itself: idiomatic semantics.&lt;/p>
&lt;p>A while back, when I was starting to learn Go, I stumbled onto this answer on StackOverflow referencing the Golang FAQ&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;The reason [the ternary operator] is absent from Go is that the language&amp;rsquo;s designers had seen the operation used too often to create impenetrably complex expressions. The if-else form, although longer, is unquestionably clearer. A language needs only one conditional control flow construct.&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;p>Let me emphasize a particular point here that I think really stands out to me:&lt;/p>
&lt;blockquote>
&lt;p>“&amp;hellip;the if-else form, although longer, is unquestionably clearer&amp;hellip;”&lt;/p>
&lt;/blockquote>
&lt;p>I think that’s the big selling point of Go as a programming language. The syntax strives to be idiomatic and easy-to-read, and the official toolchain isn’t afraid to enforce the shit out of this principle even if it means inflating your LOC and making your code a little more verbose than it needs to be. Terseness is secondary: good code in Go&amp;rsquo;s eyes is code that you read once, write once, and can immediately grasp.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="c1">// From: github.com/uclaacm/teach-la-go-backend
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">// RequestBodyTo reads the request body and marshals it into
&lt;/span>&lt;span class="c1">// the interface described by i.
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">RequestBodyTo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">r&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Request&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="kd">interface&lt;/span>&lt;span class="p">{})&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">json&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewDecoder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Body&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nf">Decode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nx">io&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">EOF&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is one of those things that &amp;ndash; while I was learning Go &amp;ndash; I had wished the language didn’t take so strongly to. Now that I’ve spent more time with the language, though, and worked on some larger projects, I’ve come to a point where I feel comfortable talking about these design decisions and how they reflect on everything else. You see&amp;hellip;&lt;/p>
&lt;h2 id="go-wants-to-force-you-to-write-code-the-designers-like">Go wants to force you to write code the designers like.&lt;/h2>
&lt;p>I think that this is the paradigm that makes everyone so uneasy. We aren’t presented with the amount of rigidity introduced to Go in any programming language that I know of, except for maybe Scratch, but that’s hardly a use case.&lt;/p>
&lt;p>So what was going through the designers’ heads? And where the hell is my ternary? Look to the language designers’ presentations at SPLASH 2012 for some more context &amp;ndash; specifically, slide 10&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>:&lt;/p>
&lt;blockquote>
&lt;p>“My favorite feature isn’t in Go! Go Sucks!”&lt;/p>
&lt;p>This misses the point.&lt;/p>
&lt;/blockquote>
&lt;p>A project with similar ideals can be found in &lt;a href="https://prettier.io/docs/en/why-prettier.html">Prettier&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>“By far the biggest reason for adopting Prettier is to stop all the on-going debates over styles.”&lt;/p>
&lt;/blockquote>
&lt;p>This is analogous to what Go does at a language level. Its language design &amp;ndash; and its appropriately unforgiving linter &amp;ndash; solve problems of maintainability at the source. Rather than concern oneself with what good code looks like, one writes code that will meet some bare minimum threshold of quality enforced by the axioms of the language itself. As with any language, it’s still possible to write unmaintainable spaghetti:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">type&lt;/span> &lt;span class="nx">MyDB&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">string&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">getValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">db&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">MyDB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">username&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">db&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">db&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;users&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// ...
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">db&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;users&amp;#34;&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="s">&amp;#34;names&amp;#34;&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="nx">username&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip;Go just tries to make that as painful a process as possible.&lt;/p>
&lt;h2 id="where-is-my-ternary">Where is my ternary?&lt;/h2>
&lt;p>Well, it isn&amp;rsquo;t there. It&amp;rsquo;s gone forever in Go. They threw it out because it was deemed unclear or confusing. Let’s go through a few features that &lt;strong>C and C++ have, but Go doesn’t.&lt;/strong> I want you to glance through them and think about which features you absolutely loved having.&lt;/p>
&lt;ul>
&lt;li>Ternary operator&lt;/li>
&lt;li>“”””Macros””””&lt;/li>
&lt;li>&lt;code>NULL&lt;/code>, &lt;code>nullptr&lt;/code>, and &lt;code>MY_LIBRARY_NULL&lt;/code>&lt;/li>
&lt;li>&lt;code>typedef __something something;&lt;/code>&lt;/li>
&lt;li>&lt;code>template&amp;lt;typedef T&amp;gt;&lt;/code>&lt;/li>
&lt;li>&lt;code>retType MyClass::fnName()&lt;/code>, and generic class member functions.&lt;/li>
&lt;li>&lt;code>std::thread&lt;/code>&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup> vs. &lt;code>std::async&lt;/code>&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup> vs. &lt;code>boost&lt;/code>&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>&lt;/li>
&lt;/ul>
&lt;p>The two features that I personally noticed learning Go were the lack of a ternary operator and the lack of generics. However, the more Go I wrote, the less I found myself falling back on them. In place of ternary, one can use &lt;code>if/else&lt;/code>. Sure, it&amp;rsquo;s at least five lines after &lt;code>gofmt&lt;/code>, but it reads idiomatically. In place of generics, we can use interfaces, which are implicitly implemented &amp;ndash; a far more flexible compromise than static assertions for polymorphic &amp;ldquo;&amp;ldquo;type bounds&amp;rdquo;&amp;rdquo;.&lt;/p>
&lt;p>This wasn&amp;rsquo;t just in code I was writing while learning. Suddenly, contributions to Go projects were easier to read, even if they were authored by someone who started learning Go last week. Suddenly, errors were being managed and useless variables were being pruned not necessarily because programmers are keeping an eye out for them, but because &lt;em>the program won&amp;rsquo;t even compile without addressing them&lt;/em>. Mix this with Go&amp;rsquo;s emphasis on test-driven development, and source is enforcably safer.&lt;/p>
&lt;p>The Go programming language was designed by Google engineers who expect to write and maintain codebases with SLOC in the tens of thousands to drive complex systems in the highest-demand environments.&lt;/p>
&lt;p>Writing code the designers like might not be so bad after all.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>&lt;a href="https://stackoverflow.com/a/60561838">https://stackoverflow.com/a/60561838&lt;/a> referencing &lt;a href="https://golang.org/doc/faq#Does_Go_have_a_ternary_form">https://golang.org/doc/faq#Does_Go_have_a_ternary_form&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>Rob Pike. Go at Google. &lt;a href="https://talks.golang.org/2012/splash.slide#10">https://talks.golang.org/2012/splash.slide#10&lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>C++&amp;rsquo;s &lt;code>std::thread&lt;/code>. &lt;a href="https://en.cppreference.com/w/cpp/thread/thread">https://en.cppreference.com/w/cpp/thread/thread&lt;/a>&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>C++&amp;rsquo;s &lt;code>std::async&lt;/code>. &lt;a href="https://en.cppreference.com/w/cpp/thread/async">https://en.cppreference.com/w/cpp/thread/async&lt;/a>&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5" role="doc-endnote">
&lt;p>Boost&amp;rsquo;s async ecosystem. &lt;a href="https://www.boost.org/doc/libs/1_35_0/doc/html/boost_asio/design/async.html">https://www.boost.org/doc/libs/1_35_0/doc/html/boost_asio/design/async.html&lt;/a>&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Understanding Haskell Through Rust (and vice versa)</title><link>https://krashanoff.com/2021/10/29/understanding-haskell-through-rust-and-vice-versa/</link><pubDate>Fri, 29 Oct 2021 00:00:00 -0700</pubDate><guid>https://krashanoff.com/2021/10/29/understanding-haskell-through-rust-and-vice-versa/</guid><description>&lt;p>Haskell is a very strange programming language. I have never had a particular reason to
learn the language in the same way I needed Go for my clubs projects or Rust for understanding
a few open-source projects. I&amp;rsquo;m not writing any math-heavy research papers, and even then I
can&amp;rsquo;t say that I&amp;rsquo;d jump to using Haskell. I had always found it a curiosity, and not much more.&lt;/p>
&lt;p>Every time I have a bunch of exams queued up, though, I come around to trying to learn it, and
then give up when I get to parts about monads and all this other category theory stuff.&lt;/p>
&lt;p>This October, I took another dive into it after getting burnt out writing a &lt;em>lot&lt;/em> of
Rust. For whatever reason, this time, it made a lot more sense to me.&lt;/p>
&lt;h2 id="learning-struggles">Learning Struggles&lt;/h2>
&lt;p>I think the thing that it boiled down to for me while struggling to learn is the syntax of the
language. Yeah, it&amp;rsquo;s functional, so it&amp;rsquo;s pretty unfamiliar, but even if you&amp;rsquo;re coming from
something like OCaml, as I was in my second year of college, it&amp;rsquo;s still just &lt;em>weird&lt;/em>.&lt;/p>
&lt;p>There&amp;rsquo;s a lot of different ways of doing the same thing at a fundamental level.&lt;/p>
&lt;p>Which of these looks more syntactically sane to you? Or, even better, which of these
immediately demonstrates exactly what it&amp;rsquo;s going to do?&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-haskell" data-lang="haskell">&lt;span class="nf">prefix&lt;/span> &lt;span class="ow">=&lt;/span> &lt;span class="s">&amp;#34;hi there &amp;#34;&lt;/span>
&lt;span class="nf">sayHi&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="ow">=&lt;/span> &lt;span class="n">putStrLn&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">prefix&lt;/span> &lt;span class="o">++&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">-- (1)&lt;/span>
&lt;span class="nf">sayHi&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="ow">=&lt;/span> &lt;span class="n">putStrLn&lt;/span> &lt;span class="o">$&lt;/span> &lt;span class="n">prefix&lt;/span> &lt;span class="o">++&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="c1">-- (2)&lt;/span>
&lt;span class="nf">sayHi&lt;/span> &lt;span class="ow">=&lt;/span> &lt;span class="n">putStrLn&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">prefix&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">-- (3)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>All of these functions typecheck. All of them do the same thing: they apply some prefix to
a string, then print it.&lt;/p>
&lt;pre>&lt;code>Prelude&amp;gt; sayHi &amp;quot;reader&amp;quot;
hi there reader
&lt;/code>&lt;/pre>&lt;p>Some of the examples use currying (&lt;code>3&lt;/code>), some don&amp;rsquo;t. Some use an entire
operator for simply applying parameters to a function (&lt;code>2&lt;/code>), another composes functions (&lt;code>3&lt;/code>).&lt;/p>
&lt;p>Like natural language, there&amp;rsquo;s always more than one way to say the same thing when programming.
In Haskell, there&amp;rsquo;s even more. It gives the programmer a lot more creative freedom about how they
want to express their ideas without sacrificing functionality.&lt;/p>
&lt;p>This is good: focused use of Haskell&amp;rsquo;s syntax leads to concise code and builds a relationship
between the author and their reader.&lt;/p>
&lt;p>This is bad: brandishing its syntax can cause confusion. This is what gave me a lot of trouble while
familiarizing myself with its grammar. Once you get over the initial hump, though, writing software
becomes even more creative.&lt;/p>
&lt;p>Here&amp;rsquo;s another example, where we increment an optional value.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-haskell" data-lang="haskell">&lt;span class="c1">-- Using a case statement:&lt;/span>
&lt;span class="nf">possiblyIncrement&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="ow">=&lt;/span> &lt;span class="kr">case&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="kr">of&lt;/span>
&lt;span class="kt">Just&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="ow">-&amp;gt;&lt;/span> &lt;span class="kt">Just&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kt">Nothing&lt;/span> &lt;span class="ow">-&amp;gt;&lt;/span> &lt;span class="kt">Nothing&lt;/span>
&lt;span class="c1">-- Using a lambda case statement:&lt;/span>
&lt;span class="c1">-- You have to turn this on with &amp;#39;{-# LANGUAGE LambdaCase #-}&amp;#39;.&lt;/span>
&lt;span class="nf">possiblyIncrement&lt;/span> &lt;span class="ow">=&lt;/span> &lt;span class="nf">\&lt;/span>&lt;span class="kr">case&lt;/span>
&lt;span class="kt">Just&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="ow">-&amp;gt;&lt;/span> &lt;span class="kt">Just&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="kt">Nothing&lt;/span> &lt;span class="ow">-&amp;gt;&lt;/span> &lt;span class="kt">Nothing&lt;/span>
&lt;span class="c1">-- Or, using pattern matching:&lt;/span>
&lt;span class="nf">possiblyIncrement&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">Just&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="ow">=&lt;/span> &lt;span class="kt">Just&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">possiblyIncrement&lt;/span> &lt;span class="kt">Nothing&lt;/span> &lt;span class="ow">=&lt;/span> &lt;span class="kt">Nothing&lt;/span>
&lt;span class="c1">-- Or, using monads:&lt;/span>
&lt;span class="nf">possiblyIncrement&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="ow">=&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">\&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="ow">-&amp;gt;&lt;/span> &lt;span class="kt">Just&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">-- Or, with currying:&lt;/span>
&lt;span class="nf">possiblyIncrement&lt;/span> &lt;span class="ow">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">=&amp;lt;&amp;lt;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">$&lt;/span> &lt;span class="kt">Just&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We are able to describe the action of &lt;em>potentially&lt;/em> modifying a value under an abstraction with
Haskell&amp;rsquo;s &lt;code>bind&lt;/code> (&lt;code>&amp;gt;&amp;gt;=&lt;/code>) operator. There are a plethora of ways of approaching it, even in this
simple example. Depending on which way one approaches it, the immediate meaning might change.&lt;/p>
&lt;p>In nontrivial codebases, the voice of the author determines its maintainability &amp;ndash; how terse it
will be. For more complicated Haskell programs, functions can reach tens of lines. Doesn&amp;rsquo;t sound
like much, except each line comes with this same exceptional information density.&lt;/p>
&lt;h2 id="rust-parallels">Rust Parallels&lt;/h2>
&lt;p>Looking over these functions after writing a ton of Rust, though, I realized these semantics reminded me
of a fundamental example.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-rs" data-lang="rs">&lt;span class="k">fn&lt;/span> &lt;span class="nf">potentially_increment&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">u&lt;/span>: &lt;span class="nb">Option&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">u32&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Option&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">u32&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">u&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In Rust, an &lt;code>Option&amp;lt;T&amp;gt;&lt;/code> type can have its underlying value &lt;em>potentially&lt;/em> modified with a call to
&lt;code>Option&amp;lt;T&amp;gt;::map&lt;/code>. This may sound similar to the &lt;code>bind&lt;/code> operator.&lt;/p>
&lt;p>It was when I came to this parallel that I noticed how many things in Rust are near-direct analogs to
Haskell. A &lt;code>Tree&lt;/code> in Haskell, for example, might look like this:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-haskell" data-lang="haskell">&lt;span class="kr">data&lt;/span> &lt;span class="kt">Tree&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="ow">=&lt;/span> &lt;span class="kt">Node&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">Tree&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">Tree&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kt">Leaf&lt;/span> &lt;span class="n">a&lt;/span>
&lt;span class="kr">deriving&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">Show&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nf">valAt&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">Leaf&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="ow">=&lt;/span> &lt;span class="kt">Just&lt;/span> &lt;span class="n">v&lt;/span>
&lt;span class="nf">valAt&lt;/span> &lt;span class="kr">_&lt;/span> &lt;span class="ow">=&lt;/span> &lt;span class="kt">Nothing&lt;/span>
&lt;span class="kr">instance&lt;/span> &lt;span class="kt">Eq&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="ow">=&amp;gt;&lt;/span> &lt;span class="kt">Eq&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">Tree&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kr">where&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="ow">=&lt;/span> &lt;span class="n">valAt&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">valAt&lt;/span> &lt;span class="n">b&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Compare this to a Rust data structure that I&amp;rsquo;ve coerced to appear as similar as possible:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-rs" data-lang="rs">&lt;span class="cp">#[derive(Debug)]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">Tree&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>: &lt;span class="nb">Eq&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">left&lt;/span>: &lt;span class="nb">Option&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Tree&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">right&lt;/span>: &lt;span class="nb">Option&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Tree&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">value&lt;/span>: &lt;span class="nb">Option&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">impl&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">std&lt;/span>::&lt;span class="n">cmp&lt;/span>::&lt;span class="nb">PartialEq&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Tree&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">type&lt;/span> &lt;span class="nc">Rhs&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Tree&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">eq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">other&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="nc">Rhs&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="kt">bool&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">todo&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">ne&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">other&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="nc">Rhs&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="kt">bool&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">todo&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The Haskell version is the same structure expressed tersely, in exchange for a
less-intuitive grammar.&lt;/p>
&lt;p>When I realized the parallel between these two, things gradually started to click.
Rust paradigms are generally Haskell paradigms expressed in a more imperative way.
That is, Rust is a scaffold between the safety of the functional world and the
familiarity of the imperative, at expense of verbosity.&lt;/p>
&lt;p>Others have written about the more direct similarities between Haskell and Rust&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>,
but I&amp;rsquo;d like to quickly talk about two trade-offs Rust has made to inherit some of their
ideas beyond syntax.&lt;/p>
&lt;h2 id="currying-and-fluency">Currying and Fluency&lt;/h2>
&lt;p>Haskell is built around currying. Applying a parameter to a function produces a new
function that simply takes one less parameter:&lt;/p>
&lt;pre>&lt;code>Prelude&amp;gt; :t (+)
(+) :: Num a =&amp;gt; a -&amp;gt; a -&amp;gt; a
Prelude&amp;gt; :t (+ 2)
(+ 2) :: Num a =&amp;gt; a -&amp;gt; a
&lt;/code>&lt;/pre>&lt;p>This has a number of useful applications, though my most common exposure to it was
through function declarations that are simply chains of others:&lt;/p>
&lt;pre>&lt;code>Prelude&amp;gt; :t (=&amp;lt;&amp;lt;)
(=&amp;lt;&amp;lt;) :: Monad m =&amp;gt; (a -&amp;gt; m b) -&amp;gt; m a -&amp;gt; m b
Prelude&amp;gt; potentiallyIncrement = (=&amp;lt;&amp;lt;) $ Just . (+ 1)
Prelude&amp;gt; :t potentiallyIncrement
potentiallyIncrement :: Num b =&amp;gt; Maybe b -&amp;gt; Maybe b
&lt;/code>&lt;/pre>&lt;p>I&amp;rsquo;d argue this drives the &amp;ldquo;flow&amp;rdquo; of the code.&lt;/p>
&lt;p>While Rust does not have out of the box support for currying&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>,
it has its own sort of &amp;ldquo;flow mechanic&amp;rdquo;: functional fluency. Rather than partial application of
functions generating new functions, we can partially apply attributes onto a struct
through functions, generating new partial data structures.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-rs" data-lang="rs">&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">myfile&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">OpenOptions&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;filename.txt&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">unwrap&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This adopts a functional approach to object-oriented operations.&lt;/p>
&lt;h2 id="monads-vs-results--options">Monads vs. Results + Options&lt;/h2>
&lt;p>I pinned down monads as a container type in the same vein as &lt;code>Option&amp;lt;T&amp;gt;&lt;/code>. Let&amp;rsquo;s compare
&lt;code>Option&amp;lt;T&amp;gt;&lt;/code> to &lt;code>Maybe&lt;/code>:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Operation&lt;/th>
&lt;th>Rust&lt;/th>
&lt;th>Haskell&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">Wrap in container&lt;/td>
&lt;td>&lt;code>Some(x)&lt;/code>&lt;/td>
&lt;td>&lt;code>Just (x)&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Modify underlying value&lt;/td>
&lt;td>&lt;code>.map()&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;gt;&amp;gt;=&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Get first underlying value&lt;/td>
&lt;td>&lt;code>.iter().find()&lt;/code>&lt;/td>
&lt;td>&lt;code>msum&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Map each underlying value in an iterator&lt;/td>
&lt;td>`.iter().map(&lt;/td>
&lt;td>x&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Where the two differ is that monads are also their own &lt;code>Result&amp;lt;T, E&amp;gt;&lt;/code>. The ubiquitous &lt;code>IO&lt;/code> monad
is an example of this&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>Rather than keeping two separate types with uniform interfaces, Haskell instead has a single
type with a single, more polymorphically powerful interface.&lt;/p>
&lt;p>In the same way that I came to appreciate Rust after an initial hurdle,
I&amp;rsquo;m starting to understand why Haskell is well-liked by its developers. It just took
a small change in perspective.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>Others have written about more direct similarities between Rust and Haskell:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://xion.io/post/programming/rust-into-haskell.html">http://xion.io/post/programming/rust-into-haskell.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.fpcomplete.com/blog/2018/11/haskell-and-rust/">https://www.fpcomplete.com/blog/2018/11/haskell-and-rust/&lt;/a>&lt;/li>
&lt;/ul>
&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>There is a crate for currying functions in Rust. &lt;a href="https://peppe.rs/posts/auto-currying_rust_functions/">https://peppe.rs/posts/auto-currying_rust_functions/&lt;/a>&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>&lt;a href="https://hackage.haskell.org/package/base-4.9.1.0/docs/System-IO.html">https://hackage.haskell.org/package/base-4.9.1.0/docs/System-IO.html&lt;/a>&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>An SSH Tarpit in 24 Lines</title><link>https://krashanoff.com/2021/09/27/an-ssh-tarpit-in-24-lines/</link><pubDate>Mon, 27 Sep 2021 00:00:00 -0700</pubDate><guid>https://krashanoff.com/2021/09/27/an-ssh-tarpit-in-24-lines/</guid><description>&lt;p>I found Chris Wellons' &lt;a href="https://nullprogram.com/blog/2019/03/22/">endlessh&lt;/a>
to be very neat, so I wrote a short one in Rust. This compiles down to about
337kB after stripping metadata on the &lt;code>current-thread&lt;/code> flavor of &lt;a href="https://tokio.rs/">&lt;code>tokio&lt;/code>&lt;/a>.&lt;/p>
&lt;p>If you want to try it yourself, you can run it with &lt;code>./binname [PORT NUMBER]&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-rs" data-lang="rs">&lt;span class="k">use&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">std&lt;/span>::&lt;span class="p">{&lt;/span>&lt;span class="n">env&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">time&lt;/span>::&lt;span class="n">Duration&lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">use&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tokio&lt;/span>::&lt;span class="p">{&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">io&lt;/span>::&lt;span class="n">AsyncWriteExt&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">net&lt;/span>::&lt;span class="n">TcpListener&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">time&lt;/span>::&lt;span class="n">interval&lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="cp">#[tokio::main]&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">port&lt;/span>: &lt;span class="nb">String&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">env&lt;/span>::&lt;span class="n">args&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">skip&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">collect&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">listener&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">TcpListener&lt;/span>::&lt;span class="n">bind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;0.0.0.0:{}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">port&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;failed to bind to port&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">loop&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Ok&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">stream&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">_&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">listener&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">accept&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tokio&lt;/span>::&lt;span class="n">spawn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">async&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">move&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">interval&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">interval&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Duration&lt;/span>::&lt;span class="n">from_secs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">));&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">loop&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Err&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">stream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">b&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">eprintln&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;{}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">interval&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">tick&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="k">await&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">});&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Exploring OpenBSD</title><link>https://krashanoff.com/2021/09/24/exploring-openbsd/</link><pubDate>Fri, 24 Sep 2021 00:00:00 -0700</pubDate><guid>https://krashanoff.com/2021/09/24/exploring-openbsd/</guid><description>&lt;p>I&amp;rsquo;m an operating systems enthusiast, and love &lt;a href="https://www.linux.org/">Linux&lt;/a>.&lt;/p>
&lt;p>This said, there&amp;rsquo;s plenty of other operating systems out there to explore, and
a significant fraction of those alternatives are labelled &amp;ldquo;BSD&amp;rdquo;, referring to
the &lt;a href="https://en.wikipedia.org/wiki/Berkeley_Software_Distribution">Berkeley Software Distribution&lt;/a>
derivatives of the &lt;a href="https://en.wikipedia.org/wiki/Unix">Unix&lt;/a> operating system that
emerged shortly after &lt;a href="https://en.wikipedia.org/wiki/Bell_Labs">Bell Labs&lt;/a> dissolved.&lt;/p>
&lt;p>What&amp;rsquo;s nice about BSD Unix is that most of them try to stay relatively
true to the original Unix philosophy, and remain as free as they possibly
can without sacrificing quality. Why not start, then, by dipping our toes into the
water with the OS that claims to be &lt;a href="https://www.openbsd.org/faq/faq1.html">&amp;ldquo;all free&amp;rdquo;&lt;/a>?&lt;/p>
&lt;h2 id="openbsd">OpenBSD&lt;/h2>
&lt;p>&amp;hellip;or maybe it was a leap.&lt;/p>
&lt;p>I set out on my OpenBSD expedition to build a router for my roommate and I while
we were waiting on another, who had a router/wireless AP. Faced with a cable
modem from our local ISP, we had no choice but to pursue making a router of our
internet-facing machine.&lt;/p>
&lt;p>I browsed on over to the &lt;a href="https://www.openbsd.org/">OpenBSD website&lt;/a>, likely
bouncing off a few &lt;code>(Free|Open)&lt;/code>BSD servers before hitting the OpenBSD box
hosting the site.&lt;/p>
&lt;p>On the Internet, these BSD-derivatives are ubiquitous for critical systems. At least
in the case of OpenBSD, this is for good reason: the
operating system &lt;a href="https://www.openbsd.org/faq/upgrade63.html">relinks the kernel on boot&lt;/a>,
introduced &lt;a href="https://en.wikipedia.org/wiki/W%5EX">W^X&lt;/a>, and opportunistically integrates cryptography
throughout. The team isn&amp;rsquo;t afraid to tote this around &amp;ndash; they even have a page
basically &lt;a href="https://www.openbsd.org/crypto.html">flipping off a few governments&lt;/a>.&lt;/p>
&lt;h2 id="ux">UX&lt;/h2>
&lt;p>Post-download, I imaged a flash drive, spun up the years-old hardware destined
to become our temporary router, and dove right in.&lt;/p>
&lt;p>The OpenBSD experience is classic. It&amp;rsquo;s still using &lt;a href="https://www.freebsd.org/cgi/man.cgi?query=ffs&amp;amp;sektion=7">&lt;code>ffs(7)&lt;/code>&lt;/a>, has an
exceedingly stable kernel with a &lt;a href="https://en.wikipedia.org/wiki/Giant_lock">sizable lock&lt;/a>,
and isn&amp;rsquo;t very quick to adopt
the latest technologies (Intel&amp;rsquo;s &lt;a href="https://www.intel.com/content/www/us/en/architecture-and-technology/advanced-encryption-standard-aes/data-protection-aes-general-technology.html">AES-NI&lt;/a> comes to mind). If you do happen
to have a few terabytes onboard your OpenBSD computer, it might take a couple
hours to run &lt;a href="https://man.openbsd.org/fsck">&lt;code>fsck(8)&lt;/code>&lt;/a> if shit hits the fan.&lt;/p>
&lt;p>These aren&amp;rsquo;t necessarily bad things. My little server
does not need more than a few gigabytes of storage and two cores for what it&amp;rsquo;s
doing, and all I really demand of an operating system for its purposes is stability.&lt;/p>
&lt;p>Luckily, the setup process is far from classic. The install is very, very
smooth. Compared to something like &lt;a href="https://wiki.gentoo.org/">Gentoo&lt;/a>, it&amp;rsquo;s a breeze with just a few
prompts mirroring what you&amp;rsquo;d see in your average Debian installation wizard.&lt;/p>
&lt;p>Once inside, OpenBSD is a well-documented, well-polished system with very few &amp;ldquo;huh?&amp;rdquo;
situations. By that, I mean situations where I found myself face-to-face with a
bug the manpages didn&amp;rsquo;t give me explicit instruction against &amp;ndash; it does a great
job of easing the user into the operating system so that info dumps are more
sparse, and the learning curve is gradual.&lt;/p>
&lt;p>You will learn to use &lt;a href="https://man.openbsd.org/man.1">&lt;code>man(1)&lt;/code>&lt;/a>.
You will learn what your &lt;a href="https://man.openbsd.org/hier">&lt;code>/etc&lt;/code>&lt;/a> directory is for.
These are all good things.&lt;/p>
&lt;p>I set up a router, firewall, and FTP server for our apartment with ease, and
was even comfortable enough to set up a few network tunnels (see: &lt;a href="https://man.openbsd.org/tun.4">&lt;code>tun(4)&lt;/code>&lt;/a>)
for certain applications.&lt;/p>
&lt;p>The only &amp;ldquo;mystery bug&amp;rdquo; that I encountered was that every now and again, our packet
filter would drop a few packets for maybe a half-second, even using the default
configuration. Time to resolve this problem: we put down our manpages. We turn
to Google.&lt;/p>
&lt;h2 id="community">Community&lt;/h2>
&lt;p>Googling around for a fix for that little half-second packet drop issue took
me almost two days of inconclusive results, but I was &lt;em>not&lt;/em> about to hop on
the mailing lists or forums and ask a question so broad.&lt;/p>
&lt;p>The community for OpenBSD is &lt;a href="https://distrowatch.com/table.php?distribution=freebsd">dwarfed&lt;/a> compared to &lt;a href="https://www.freebsd.org/">FreeBSD&lt;/a> or any Linux flavor.
I&amp;rsquo;d compare it in size to something like &lt;a href="https://www.bunsenlabs.org/">BunsenLabs Linux&lt;/a>.
Unlike BunsenLabs, though, OpenBSD&amp;rsquo;s community has a reputation of being &lt;em>exceedingly&lt;/em> unyielding. A
large part of this could be attributed to the personality of its
leader, who, by Linus' account, is &lt;a href="https://www.forbes.com/2005/06/16/linux-bsd-unix-cz_dl_0616theo.html">&amp;ldquo;difficult&amp;rdquo;&lt;/a>.&lt;/p>
&lt;p>This is the argument that most people will give you, but, in my opinion,
there&amp;rsquo;s a much easier, less personal take.&lt;/p>
&lt;p>One of the downsides of having extensive documentation is that developers
and users may grow frustrated reading questions answered in the docs
they just updated over and over again. For the new user, unfamiliar with
mailing lists, past answers may not be as readily available. Mix these two
together and you have a situation akin to the Linux mailing lists, but with
less margin for discussion.&lt;/p>
&lt;h2 id="freedom-and-software">Freedom and Software&lt;/h2>
&lt;p>If I had to pick a straw that might break the camel&amp;rsquo;s back for an OpenBSD
novice like me, it&amp;rsquo;s probably OpenBSD&amp;rsquo;s lack of software.&lt;/p>
&lt;p>I was trying to port my little file sharing server to the operating system
earlier today. The problem is that it&amp;rsquo;s written in Rust. I definitely
could have written the program in another language like C or Go or something,
but I felt like writing it in Rust.&lt;/p>
&lt;p>Unfortunately, &lt;a href="https://rustup.rs/">&lt;code>rustup&lt;/code>&lt;/a> isn&amp;rsquo;t available on &lt;a href="https://openports.se/">OpenBSD ports&lt;/a>,
and OpenBSD itself is a &lt;a href="https://doc.rust-lang.org/nightly/rustc/platform-support.html#tier-3">tier 3 platform&lt;/a>
for Rust compilation. This means that compiling Rust natively is painful, and
cross-compiling Rust is next to impossible.&lt;/p>
&lt;p>This is when the cracks in the facade start to show for OpenBSD. Compared
to FreeBSD, which has a huge number of packages available for download and
&lt;a href="https://docs.freebsd.org/en/books/handbook/linuxemu/">binary compatibility with Linux&lt;/a>,
OpenBSD keeps their software repositories pretty tight
to maintain their openness and keep their interoperability with older systems.
They also discourage use of proprietary drivers.&lt;/p>
&lt;p>That is, OpenBSD seems to place its focus in expanding the freedom of software,
sometimes at expense of the user&amp;rsquo;s freedom of choice.&lt;/p>
&lt;h2 id="purpose-built-proper-abstractions">Purpose Built; Proper Abstractions&lt;/h2>
&lt;p>OpenBSD is an operating system that is built to run on hardware,
&lt;a href="https://www.virtualbox.org/ticket/639">not virtualized&lt;/a>.
It is built for security, software freedom, and stability. It is
easy to understand and secure by default. The issues I encountered in my experience
with it were pretty tame compared to those I ran into on any Linux derivative.&lt;/p>
&lt;p>Thinking back to something as elementary as rebooting my computer after my first
Linux installation, I remember &lt;a href="https://unix.stackexchange.com/q/249654">getting softlocked at shutdown&lt;/a>.&lt;/p>
&lt;p>Reflecting on more recent experiences with Manjaro, I recall my configuration files
for system-critical processes being scattered everywhere, and having too much power
granted to me with too little knowledge. Garbage was left behind by packages without
my knowledge, and without any clear way to locate it all.&lt;/p>
&lt;p>A lot of these issues can be chalked up to Linux distributions getting filled with bloatware
and one-off abstractions that fail to empower their users in efforts of being
&amp;ldquo;the best OS&amp;rdquo;. Consider Ubuntu&amp;rsquo;s redundancies:
&lt;a href="https://manpages.ubuntu.com/manpages/precise/en/man8/iptables.8.html">&lt;code>iptables(8)&lt;/code>&lt;/a>,
&lt;a href="https://manpages.ubuntu.com/manpages/bionic/man8/ufw.8.html">&lt;code>ufw(8)&lt;/code>&lt;/a>,
&lt;a href="https://manpages.ubuntu.com/manpages/xenial/man8/apt.8.html">&lt;code>apt(8)&lt;/code>&lt;/a>,
&lt;a href="https://manpages.ubuntu.com/manpages/impish/en/man8/snap.8.html">&lt;code>snap(8)&lt;/code>&lt;/a>. Consider
Gentoo&amp;rsquo;s behemoth &lt;a href="https://wiki.gentoo.org/wiki/Portage">&lt;code>portage(5)&lt;/code>&lt;/a>.&lt;/p>
&lt;p>OpenBSD&amp;rsquo;s objectives, on the other hand, are precise, and it is a damn good
solution to them.&lt;/p>
&lt;blockquote>
&lt;p>So does all of this mean that BSD is superior to Linux?&lt;/p>
&lt;/blockquote>
&lt;p>eh.&lt;/p></description></item></channel></rss>