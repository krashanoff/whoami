<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:base="https://krashanoff.com/">
  <title>krashanoff.com</title>
  <subtitle>The blog of Leonid Krashanoff.</subtitle>
  <link href="https://krashanoff.com/feed.xml" rel="self"/>
  <link href="https://krashanoff.com/"/>
  <updated>2023-06-20T05:19:00Z</updated>
  <id>https://krashanoff.com/</id>
  <author>
    <name>Leonid Krashanoff</name>
    <email>hello@krashanoff.com</email>
  </author>
  <entry>
    <title>Exploring OpenBSD</title>
    <link href="https://krashanoff.com/2021/09/24/exploring-openbsd/"/>
    <updated>2021-09-24T07:00:00Z</updated>
    <id>https://krashanoff.com/2021/09/24/exploring-openbsd/</id>
    <content xml:lang="en" type="html">&lt;p&gt;I&#39;m an operating systems enthusiast, and love &lt;a href=&quot;https://www.linux.org/&quot;&gt;Linux&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This said, there&#39;s plenty of other operating systems out there to explore, and
a significant fraction of those alternatives are labelled &amp;quot;BSD&amp;quot;, referring to
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Berkeley_Software_Distribution&quot;&gt;Berkeley Software Distribution&lt;/a&gt;
derivatives of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Unix&quot;&gt;Unix&lt;/a&gt; operating system that
emerged shortly after &lt;a href=&quot;https://en.wikipedia.org/wiki/Bell_Labs&quot;&gt;Bell Labs&lt;/a&gt; dissolved.&lt;/p&gt;
&lt;p&gt;What&#39;s nice about BSD Unix is that most of them try to stay relatively
true to the original Unix philosophy, and remain as free as they possibly
can without sacrificing quality. Why not start, then, by dipping our toes into the
water with the OS that claims to be &lt;a href=&quot;https://www.openbsd.org/faq/faq1.html&quot;&gt;&amp;quot;all free&amp;quot;&lt;/a&gt;?&lt;/p&gt;
&lt;h2 id=&quot;openbsd&quot; tabindex=&quot;-1&quot;&gt;OpenBSD&lt;/h2&gt;
&lt;p&gt;...or maybe it was a leap.&lt;/p&gt;
&lt;p&gt;I set out on my OpenBSD expedition to build a router for my roommate and I while
we were waiting on another, who had a router/wireless AP. Faced with a cable
modem from our local ISP, we had no choice but to pursue making a router of our
internet-facing machine.&lt;/p&gt;
&lt;p&gt;I browsed on over to the &lt;a href=&quot;https://www.openbsd.org/&quot;&gt;OpenBSD website&lt;/a&gt;, likely
bouncing off a few &lt;code&gt;(Free|Open)&lt;/code&gt;BSD servers before hitting the OpenBSD box
hosting the site.&lt;/p&gt;
&lt;p&gt;On the Internet, these BSD-derivatives are ubiquitous for critical systems. At least
in the case of OpenBSD, this is for good reason: the
operating system &lt;a href=&quot;https://www.openbsd.org/faq/upgrade63.html&quot;&gt;relinks the kernel on boot&lt;/a&gt;,
introduced &lt;a href=&quot;https://en.wikipedia.org/wiki/W%5EX&quot;&gt;W^X&lt;/a&gt;, and opportunistically integrates cryptography
throughout. The team isn&#39;t afraid to tote this around -- they even have a page
basically &lt;a href=&quot;https://www.openbsd.org/crypto.html&quot;&gt;flipping off a few governments&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;ux&quot; tabindex=&quot;-1&quot;&gt;UX&lt;/h2&gt;
&lt;p&gt;Post-download, I imaged a flash drive, spun up the years-old hardware destined
to become our temporary router, and dove right in.&lt;/p&gt;
&lt;p&gt;The OpenBSD experience is classic. It&#39;s still using &lt;a href=&quot;https://www.freebsd.org/cgi/man.cgi?query=ffs&amp;amp;sektion=7&quot;&gt;&lt;code&gt;ffs(7)&lt;/code&gt;&lt;/a&gt;, has an
exceedingly stable kernel with a &lt;a href=&quot;https://en.wikipedia.org/wiki/Giant_lock&quot;&gt;sizable lock&lt;/a&gt;,
and isn&#39;t very quick to adopt
the latest technologies (Intel&#39;s &lt;a href=&quot;https://www.intel.com/content/www/us/en/architecture-and-technology/advanced-encryption-standard-aes/data-protection-aes-general-technology.html&quot;&gt;AES-NI&lt;/a&gt; comes to mind). If you do happen
to have a few terabytes onboard your OpenBSD computer, it might take a couple
hours to run &lt;a href=&quot;https://man.openbsd.org/fsck&quot;&gt;&lt;code&gt;fsck(8)&lt;/code&gt;&lt;/a&gt; if shit hits the fan.&lt;/p&gt;
&lt;p&gt;These aren&#39;t necessarily bad things. My little server
does not need more than a few gigabytes of storage and two cores for what it&#39;s
doing, and all I really demand of an operating system for its purposes is stability.&lt;/p&gt;
&lt;p&gt;Luckily, the setup process is far from classic. The install is very, very
smooth. Compared to something like &lt;a href=&quot;https://wiki.gentoo.org/&quot;&gt;Gentoo&lt;/a&gt;, it&#39;s a breeze with just a few
prompts mirroring what you&#39;d see in your average Debian installation wizard.&lt;/p&gt;
&lt;p&gt;Once inside, OpenBSD is a well-documented, well-polished system with very few &amp;quot;huh?&amp;quot;
situations. By that, I mean situations where I found myself face-to-face with a
bug the manpages didn&#39;t give me explicit instruction against -- it does a great
job of easing the user into the operating system so that info dumps are more
sparse, and the learning curve is gradual.&lt;/p&gt;
&lt;p&gt;You will learn to use &lt;a href=&quot;https://man.openbsd.org/man.1&quot;&gt;&lt;code&gt;man(1)&lt;/code&gt;&lt;/a&gt;.
You will learn what your &lt;a href=&quot;https://man.openbsd.org/hier&quot;&gt;&lt;code&gt;/etc&lt;/code&gt;&lt;/a&gt; directory is for.
These are all good things.&lt;/p&gt;
&lt;p&gt;I set up a router, firewall, and FTP server for our apartment with ease, and
was even comfortable enough to set up a few network tunnels (see: &lt;a href=&quot;https://man.openbsd.org/tun.4&quot;&gt;&lt;code&gt;tun(4)&lt;/code&gt;&lt;/a&gt;)
for certain applications.&lt;/p&gt;
&lt;p&gt;The only &amp;quot;mystery bug&amp;quot; that I encountered was that every now and again, our packet
filter would drop a few packets for maybe a half-second, even using the default
configuration. Time to resolve this problem: we put down our manpages. We turn
to Google.&lt;/p&gt;
&lt;h2 id=&quot;community&quot; tabindex=&quot;-1&quot;&gt;Community&lt;/h2&gt;
&lt;p&gt;Googling around for a fix for that little half-second packet drop issue took
me almost two days of inconclusive results, but I was &lt;em&gt;not&lt;/em&gt; about to hop on
the mailing lists or forums and ask a question so broad.&lt;/p&gt;
&lt;p&gt;The community for OpenBSD is &lt;a href=&quot;https://distrowatch.com/table.php?distribution=freebsd&quot;&gt;dwarfed&lt;/a&gt; compared to &lt;a href=&quot;https://www.freebsd.org/&quot;&gt;FreeBSD&lt;/a&gt; or any Linux flavor.
I&#39;d compare it in size to something like &lt;a href=&quot;https://www.bunsenlabs.org/&quot;&gt;BunsenLabs Linux&lt;/a&gt;.
Unlike BunsenLabs, though, OpenBSD&#39;s community has a reputation of being &lt;em&gt;exceedingly&lt;/em&gt; unyielding. A
large part of this could be attributed to the personality of its
leader, who, by Linus&#39; account, is &lt;a href=&quot;https://www.forbes.com/2005/06/16/linux-bsd-unix-cz_dl_0616theo.html&quot;&gt;&amp;quot;difficult&amp;quot;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is the argument that most people will give you, but, in my opinion,
there&#39;s a much easier, less personal take.&lt;/p&gt;
&lt;p&gt;One of the downsides of having extensive documentation is that developers
and users may grow frustrated reading questions answered in the docs
they just updated over and over again. For the new user, unfamiliar with
mailing lists, past answers may not be as readily available. Mix these two
together and you have a situation akin to the Linux mailing lists, but with
less margin for discussion.&lt;/p&gt;
&lt;h2 id=&quot;freedom-and-software&quot; tabindex=&quot;-1&quot;&gt;Freedom and Software&lt;/h2&gt;
&lt;p&gt;If I had to pick a straw that might break the camel&#39;s back for an OpenBSD
novice like me, it&#39;s probably OpenBSD&#39;s lack of software.&lt;/p&gt;
&lt;p&gt;I was trying to port my little file sharing server to the operating system
earlier today. The problem is that it&#39;s written in Rust. I definitely
could have written the program in another language like C or Go or something,
but I felt like writing it in Rust.&lt;/p&gt;
&lt;p&gt;Unfortunately, &lt;a href=&quot;https://rustup.rs/&quot;&gt;&lt;code&gt;rustup&lt;/code&gt;&lt;/a&gt; isn&#39;t available on &lt;a href=&quot;https://openports.se/&quot;&gt;OpenBSD ports&lt;/a&gt;,
and OpenBSD itself is a &lt;a href=&quot;https://doc.rust-lang.org/nightly/rustc/platform-support.html#tier-3&quot;&gt;tier 3 platform&lt;/a&gt;
for Rust compilation. This means that compiling Rust natively is painful, and
cross-compiling Rust is next to impossible.&lt;/p&gt;
&lt;p&gt;This is when the cracks in the facade start to show for OpenBSD. Compared
to FreeBSD, which has a huge number of packages available for download and
&lt;a href=&quot;https://docs.freebsd.org/en/books/handbook/linuxemu/&quot;&gt;binary compatibility with Linux&lt;/a&gt;,
OpenBSD keeps their software repositories pretty tight
to maintain their openness and keep their interoperability with older systems.
They also discourage use of proprietary drivers.&lt;/p&gt;
&lt;p&gt;That is, OpenBSD seems to place its focus in expanding the freedom of software,
sometimes at expense of the user&#39;s freedom of choice.&lt;/p&gt;
&lt;h2 id=&quot;purpose-built%3B-proper-abstractions&quot; tabindex=&quot;-1&quot;&gt;Purpose Built; Proper Abstractions&lt;/h2&gt;
&lt;p&gt;OpenBSD is an operating system that is built to run on hardware,
&lt;a href=&quot;https://www.virtualbox.org/ticket/639&quot;&gt;not virtualized&lt;/a&gt;.
It is built for security, software freedom, and stability. It is
easy to understand and secure by default. The issues I encountered in my experience
with it were pretty tame compared to those I ran into on any Linux derivative.&lt;/p&gt;
&lt;p&gt;Thinking back to something as elementary as rebooting my computer after my first
Linux installation, I remember &lt;a href=&quot;https://unix.stackexchange.com/q/249654&quot;&gt;getting softlocked at shutdown&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Reflecting on more recent experiences with Manjaro, I recall my configuration files
for system-critical processes being scattered everywhere, and having too much power
granted to me with too little knowledge. Garbage was left behind by packages without
my knowledge, and without any clear way to locate it all.&lt;/p&gt;
&lt;p&gt;A lot of these issues can be chalked up to Linux distributions getting filled with bloatware
and one-off abstractions that fail to empower their users in efforts of being
&amp;quot;the best OS&amp;quot;. Consider Ubuntu&#39;s redundancies: &lt;a href=&quot;https://manpages.ubuntu.com/manpages/precise/en/man8/iptables.8.html&quot;&gt;&lt;code&gt;iptables(8)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://manpages.ubuntu.com/manpages/bionic/man8/ufw.8.html&quot;&gt;&lt;code&gt;ufw(8)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://manpages.ubuntu.com/manpages/xenial/man8/apt.8.html&quot;&gt;&lt;code&gt;apt(8)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://manpages.ubuntu.com/manpages/impish/en/man8/snap.8.html&quot;&gt;&lt;code&gt;snap(8)&lt;/code&gt;&lt;/a&gt;. Consider Gentoo&#39;s behemoth &lt;a href=&quot;https://wiki.gentoo.org/wiki/Portage&quot;&gt;&lt;code&gt;portage(5)&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;OpenBSD&#39;s objectives, on the other hand, are precise, and it is a damn good
solution to them.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;So does all of this mean that BSD is superior to Linux?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;eh.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>An SSH Tarpit in 24 Lines</title>
    <link href="https://krashanoff.com/2021/09/27/an-ssh-tarpit-in-24-lines/"/>
    <updated>2021-09-27T07:00:00Z</updated>
    <id>https://krashanoff.com/2021/09/27/an-ssh-tarpit-in-24-lines/</id>
    <content xml:lang="en" type="html">&lt;p&gt;I found Chris Wellons&#39; &lt;a href=&quot;https://nullprogram.com/blog/2019/03/22/&quot;&gt;endlessh&lt;/a&gt;
to be very neat, so I wrote a short one in Rust. This compiles down to about
337kB after stripping metadata on the &lt;code&gt;current-thread&lt;/code&gt; flavor of &lt;a href=&quot;https://tokio.rs/&quot;&gt;&lt;code&gt;tokio&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want to try it yourself, you can run it with &lt;code&gt;./binname [PORT NUMBER]&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rs&quot;&gt;use std::{env, time::Duration};
use tokio::{self, io::AsyncWriteExt, net::TcpListener, time::interval};

#[tokio::main]
async fn main() {
    let port: String = env::args().skip(1).collect();
    let listener = TcpListener::bind(format!(&amp;quot;0.0.0.0:{}&amp;quot;, port))
        .await
        .expect(&amp;quot;failed to bind to port&amp;quot;);

    loop {
        if let Ok((mut stream, _)) = listener.accept().await {
            tokio::spawn(async move {
                let mut interval = interval(Duration::from_secs(5));
                loop {
                    if let Err(e) = stream.write(b&amp;quot;\n&amp;quot;).await {
                        eprintln!(&amp;quot;{}&amp;quot;, e);
                    }
                    interval.tick().await;
                }
            });
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>Understanding Haskell Through Rust (and vice versa)</title>
    <link href="https://krashanoff.com/2021/10/29/understanding-haskell-through-rust-and-vice-versa/"/>
    <updated>2021-10-29T07:00:00Z</updated>
    <id>https://krashanoff.com/2021/10/29/understanding-haskell-through-rust-and-vice-versa/</id>
    <content xml:lang="en" type="html">&lt;p&gt;Haskell is a very strange programming language. I have never had a particular reason to
learn the language in the same way I needed Go for my clubs projects or Rust for understanding
a few open-source projects. I&#39;m not writing any math-heavy research papers, and even then I
can&#39;t say that I&#39;d jump to using Haskell. I had always found it a curiosity, and not much more.&lt;/p&gt;
&lt;p&gt;Every time I have a bunch of exams queued up, though, I come around to trying to learn it, and
then give up when I get to parts about monads and all this other category theory stuff.&lt;/p&gt;
&lt;p&gt;This October, I took another dive into it after getting burnt out writing a &lt;em&gt;lot&lt;/em&gt; of
Rust. For whatever reason, this time, it made a lot more sense to me.&lt;/p&gt;
&lt;h2 id=&quot;learning-struggles&quot; tabindex=&quot;-1&quot;&gt;Learning Struggles&lt;/h2&gt;
&lt;p&gt;I think the thing that it boiled down to for me while struggling to learn is the syntax of the
language. Yeah, it&#39;s functional, so it&#39;s pretty unfamiliar, but even if you&#39;re coming from
something like OCaml, as I was in my second year of college, it&#39;s still just &lt;em&gt;weird&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;There&#39;s a lot of different ways of doing the same thing at a fundamental level.&lt;/p&gt;
&lt;p&gt;Which of these looks more syntactically sane to you? Or, even better, which of these
immediately demonstrates exactly what it&#39;s going to do?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;prefix = &amp;quot;hi there &amp;quot;

sayHi name = putStrLn (prefix ++ name)    -- (1)
sayHi name = putStrLn $ prefix ++ name    -- (2)
sayHi = putStrLn . (prefix ++)            -- (3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All of these functions typecheck. All of them do the same thing: they apply some prefix to
a string, then print it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Prelude&amp;gt; sayHi &amp;quot;reader&amp;quot;
hi there reader
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Some of the examples use currying (&lt;code&gt;3&lt;/code&gt;), some don&#39;t. Some use an entire
operator for simply applying parameters to a function (&lt;code&gt;2&lt;/code&gt;), another composes functions (&lt;code&gt;3&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Like natural language, there&#39;s always more than one way to say the same thing when programming.
In Haskell, there&#39;s even more. It gives the programmer a lot more creative freedom about how they
want to express their ideas without sacrificing functionality.&lt;/p&gt;
&lt;p&gt;This is good: focused use of Haskell&#39;s syntax leads to concise code and builds a relationship
between the author and their reader.&lt;/p&gt;
&lt;p&gt;This is bad: brandishing its syntax can cause confusion. This is what gave me a lot of trouble while
familiarizing myself with its grammar. Once you get over the initial hump, though, writing software
becomes even more creative.&lt;/p&gt;
&lt;p&gt;Here&#39;s another example, where we increment an optional value.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;-- Using a case statement:
possiblyIncrement a = case a of
  Just x -&amp;gt; Just (x + 1)
  Nothing -&amp;gt; Nothing

-- Using a lambda case statement:
-- You have to turn this on with &#39;{-# LANGUAGE LambdaCase #-}&#39;.
possiblyIncrement = \case
  Just x -&amp;gt; Just (x + 1)
  Nothing -&amp;gt; Nothing

-- Or, using pattern matching:
possiblyIncrement (Just x) = Just (x + 1)
possiblyIncrement Nothing = Nothing

-- Or, using monads:
possiblyIncrement a = a &amp;gt;&amp;gt;= (\x -&amp;gt; Just (x + 1))

-- Or, with currying:
possiblyIncrement = (=&amp;lt;&amp;lt;) $ Just . (+ 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are able to describe the action of &lt;em&gt;potentially&lt;/em&gt; modifying a value under an abstraction with
Haskell&#39;s &lt;code&gt;bind&lt;/code&gt; (&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;) operator. There are a plethora of ways of approaching it, even in this
simple example. Depending on which way one approaches it, the immediate meaning might change.&lt;/p&gt;
&lt;p&gt;In nontrivial codebases, the voice of the author determines its maintainability -- how terse it
will be. For more complicated Haskell programs, functions can reach tens of lines. Doesn&#39;t sound
like much, except each line comes with this same exceptional information density.&lt;/p&gt;
&lt;h2 id=&quot;rust-parallels&quot; tabindex=&quot;-1&quot;&gt;Rust Parallels&lt;/h2&gt;
&lt;p&gt;Looking over these functions after writing a ton of Rust, though, I realized these semantics reminded me
of a fundamental example.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rs&quot;&gt;fn potentially_increment(u: Option&amp;lt;u32&amp;gt;) -&amp;gt; Option&amp;lt;u32&amp;gt; {
  u.map(|i| i + 1)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In Rust, an &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; type can have its underlying value &lt;em&gt;potentially&lt;/em&gt; modified with a call to
&lt;code&gt;Option&amp;lt;T&amp;gt;::map&lt;/code&gt;. This may sound similar to the &lt;code&gt;bind&lt;/code&gt; operator.&lt;/p&gt;
&lt;p&gt;It was when I came to this parallel that I noticed how many things in Rust are near-direct analogs to
Haskell. A &lt;code&gt;Tree&lt;/code&gt; in Haskell, for example, might look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;data Tree a = Node (Tree a) (Tree a) | Leaf a
  deriving (Show)

valAt (Leaf v) = Just v
valAt _ = Nothing

instance Eq a =&amp;gt; Eq (Tree a) where
  (==) a b = valAt a == valAt b
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Compare this to a Rust data structure that I&#39;ve coerced to appear as similar as possible:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rs&quot;&gt;#[derive(Debug)]
struct Tree&amp;lt;T: Eq&amp;gt; {
  left: Option&amp;lt;Tree&amp;lt;T&amp;gt;&amp;gt;,
  right: Option&amp;lt;Tree&amp;lt;T&amp;gt;&amp;gt;,
  value: Option&amp;lt;T&amp;gt;,
}

impl std::cmp::PartialEq for Tree {
  type Rhs = Tree;

  fn eq(&amp;amp;self, other: &amp;amp;Rhs) -&amp;gt; bool {
    todo!()
  }
  fn ne(&amp;amp;self, other: &amp;amp;Rhs) -&amp;gt; bool {
    todo!()
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The Haskell version is the same structure expressed tersely, in exchange for a
less-intuitive grammar.&lt;/p&gt;
&lt;p&gt;When I realized the parallel between these two, things gradually started to click.
Rust paradigms are generally Haskell paradigms expressed in a more imperative way.
That is, Rust is a scaffold between the safety of the functional world and the
familiarity of the imperative, at expense of verbosity.&lt;/p&gt;
&lt;p&gt;Others have written about the more direct similarities between Haskell and Rust&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://krashanoff.com/2021/10/29/understanding-haskell-through-rust-and-vice-versa/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;,
but I&#39;d like to quickly talk about two trade-offs Rust has made to inherit some of their
ideas beyond syntax.&lt;/p&gt;
&lt;h2 id=&quot;currying-and-fluency&quot; tabindex=&quot;-1&quot;&gt;Currying and Fluency&lt;/h2&gt;
&lt;p&gt;Haskell is built around currying. Applying a parameter to a function produces a new
function that simply takes one less parameter:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Prelude&amp;gt; :t (+)
(+) :: Num a =&amp;gt; a -&amp;gt; a -&amp;gt; a
Prelude&amp;gt; :t (+ 2)
(+ 2) :: Num a =&amp;gt; a -&amp;gt; a
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This has a number of useful applications, though my most common exposure to it was
through function declarations that are simply chains of others:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Prelude&amp;gt; :t (=&amp;lt;&amp;lt;)
(=&amp;lt;&amp;lt;) :: Monad m =&amp;gt; (a -&amp;gt; m b) -&amp;gt; m a -&amp;gt; m b

Prelude&amp;gt; potentiallyIncrement = (=&amp;lt;&amp;lt;) $ Just . (+ 1)
Prelude&amp;gt; :t potentiallyIncrement 
potentiallyIncrement :: Num b =&amp;gt; Maybe b -&amp;gt; Maybe b
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&#39;d argue this drives the &amp;quot;flow&amp;quot; of the code.&lt;/p&gt;
&lt;p&gt;While Rust does not have out of the box support for currying&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://krashanoff.com/2021/10/29/understanding-haskell-through-rust-and-vice-versa/#fn2&quot; id=&quot;fnref2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;,
it has its own sort of &amp;quot;flow mechanic&amp;quot;: functional fluency. Rather than partial application of
functions generating new functions, we can partially apply attributes onto a struct
through functions, generating new partial data structures.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rs&quot;&gt;let myfile = OpenOptions::new()
                        .read(true)
                        .write(false);
                        .open(&amp;quot;filename.txt&amp;quot;)
                        .unwrap();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This adopts a functional approach to object-oriented operations.&lt;/p&gt;
&lt;h2 id=&quot;monads-vs.-results-%2B-options&quot; tabindex=&quot;-1&quot;&gt;Monads vs. Results + Options&lt;/h2&gt;
&lt;p&gt;I pinned down monads as a container type in the same vein as &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;. Let&#39;s compare
&lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; to &lt;code&gt;Maybe&lt;/code&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Operation&lt;/th&gt;
&lt;th&gt;Rust&lt;/th&gt;
&lt;th&gt;Haskell&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Wrap in container&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Some(x)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Just (x)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Modify underlying value&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.map()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Get first underlying value&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.iter().find()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;msum&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Map each underlying value in an iterator&lt;/td&gt;
&lt;td&gt;`.iter().map(&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Where the two differ is that monads are also their own &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt;. The ubiquitous &lt;code&gt;IO&lt;/code&gt; monad
is an example of this&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://krashanoff.com/2021/10/29/understanding-haskell-through-rust-and-vice-versa/#fn3&quot; id=&quot;fnref3&quot;&gt;[3]&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Rather than keeping two separate types with uniform interfaces, Haskell instead has a single
type with a single, more polymorphically powerful interface.&lt;/p&gt;
&lt;p&gt;In the same way that I came to appreciate Rust after an initial hurdle,
I&#39;m starting to understand why Haskell is well-liked by its developers. It just took
a small change in perspective.&lt;/p&gt;
&lt;hr class=&quot;footnotes-sep&quot; /&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;Others have written about more direct similarities between Rust and Haskell:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://xion.io/post/programming/rust-into-haskell.html&quot;&gt;http://xion.io/post/programming/rust-into-haskell.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.fpcomplete.com/blog/2018/11/haskell-and-rust/&quot;&gt;https://www.fpcomplete.com/blog/2018/11/haskell-and-rust/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
 &lt;a href=&quot;https://krashanoff.com/2021/10/29/understanding-haskell-through-rust-and-vice-versa/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/li&gt;
&lt;li id=&quot;fn2&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;There is a crate for currying functions in Rust. &lt;a href=&quot;https://peppe.rs/posts/auto-currying_rust_functions/&quot;&gt;https://peppe.rs/posts/auto-currying_rust_functions/&lt;/a&gt; &lt;a href=&quot;https://krashanoff.com/2021/10/29/understanding-haskell-through-rust-and-vice-versa/#fnref2&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn3&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://hackage.haskell.org/package/base-4.9.1.0/docs/System-IO.html&quot;&gt;https://hackage.haskell.org/package/base-4.9.1.0/docs/System-IO.html&lt;/a&gt; &lt;a href=&quot;https://krashanoff.com/2021/10/29/understanding-haskell-through-rust-and-vice-versa/#fnref3&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
  </entry>
  <entry>
    <title>Idiomatic Semantics in Golang</title>
    <link href="https://krashanoff.com/2021/11/08/idiomatic-semantics-in-golang/"/>
    <updated>2021-11-08T07:00:00Z</updated>
    <id>https://krashanoff.com/2021/11/08/idiomatic-semantics-in-golang/</id>
    <content xml:lang="en" type="html">&lt;p&gt;I have a complicated relationship with Go as a programming language. There’s a lot at its disposal , but only at expense of throwing oneself at the mercy of the language designers. What I want to talk about is a very particular part of Go that they like to stress as a coding methodology adopted into the language itself: idiomatic semantics.&lt;/p&gt;
&lt;p&gt;A while back, when I was starting to learn Go, I stumbled onto this answer on StackOverflow referencing the Golang FAQ&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://krashanoff.com/2021/11/08/idiomatic-semantics-in-golang/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The reason [the ternary operator] is absent from Go is that the language&#39;s designers had seen the operation used too often to create impenetrably complex expressions. The if-else form, although longer, is unquestionably clearer. A language needs only one conditional control flow construct.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let me emphasize a particular point here that I think really stands out to me:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;...the if-else form, although longer, is unquestionably clearer...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I think that’s the big selling point of Go as a programming language. The syntax strives to be idiomatic and easy-to-read, and the official toolchain isn’t afraid to enforce the shit out of this principle even if it means inflating your LOC and making your code a little more verbose than it needs to be. Terseness is secondary: good code in Go&#39;s eyes is code that you read once, write once, and can immediately grasp.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;// From: github.com/uclaacm/teach-la-go-backend

// RequestBodyTo reads the request body and marshals it into
// the interface described by i.
func RequestBodyTo(r *http.Request, i interface{}) error {
	if err := json.NewDecoder(r.Body).Decode(i); err == io.EOF {
		return nil
	} else {
		return err
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is one of those things that -- while I was learning Go -- I had wished the language didn’t take so strongly to. Now that I’ve spent more time with the language, though, and worked on some larger projects, I’ve come to a point where I feel comfortable talking about these design decisions and how they reflect on everything else. You see...&lt;/p&gt;
&lt;h2 id=&quot;go-wants-to-force-you-to-write-code-the-designers-like.&quot; tabindex=&quot;-1&quot;&gt;Go wants to force you to write code the designers like.&lt;/h2&gt;
&lt;p&gt;I think that this is the paradigm that makes everyone so uneasy. We aren’t presented with the amount of rigidity introduced to Go in any programming language that I know of, except for maybe Scratch, but that’s hardly a use case.&lt;/p&gt;
&lt;p&gt;So what was going through the designers’ heads? And where the hell is my ternary? Look to the language designers’ presentations at SPLASH 2012 for some more context -- specifically, slide 10&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://krashanoff.com/2021/11/08/idiomatic-semantics-in-golang/#fn2&quot; id=&quot;fnref2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“My favorite feature isn’t in Go! Go Sucks!”&lt;/p&gt;
&lt;p&gt;This misses the point.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A project with similar ideals can be found in &lt;a href=&quot;https://prettier.io/docs/en/why-prettier.html&quot;&gt;Prettier&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“By far the biggest reason for adopting Prettier is to stop all the on-going debates over styles.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is analogous to what Go does at a language level. Its language design -- and its appropriately unforgiving linter -- solve problems of maintainability at the source. Rather than concern oneself with what good code looks like, one writes code that will meet some bare minimum threshold of quality enforced by the axioms of the language itself. As with any language, it’s still possible to write unmaintainable spaghetti:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;type MyDB = map[string]map[string]map[string]string

func getValue(db *MyDB, username string) string {
  if db == nil {
    return &amp;quot;&amp;quot;
  } else if db[&amp;quot;users&amp;quot;] == nil {
    return &amp;quot;&amp;quot;
  } else if {
    // ...
  }
  return db[&amp;quot;users&amp;quot;][&amp;quot;names&amp;quot;][username]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;...Go just tries to make that as painful a process as possible.&lt;/p&gt;
&lt;h2 id=&quot;where-is-my-ternary%3F&quot; tabindex=&quot;-1&quot;&gt;Where is my ternary?&lt;/h2&gt;
&lt;p&gt;Well, it isn&#39;t there. It&#39;s gone forever in Go. They threw it out because it was deemed unclear or confusing. Let’s go through a few features that &lt;strong&gt;C and C++ have, but Go doesn’t.&lt;/strong&gt; I want you to glance through them and think about which features you absolutely loved having.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ternary operator&lt;/li&gt;
&lt;li&gt;“”””Macros””””&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NULL&lt;/code&gt;, &lt;code&gt;nullptr&lt;/code&gt;, and &lt;code&gt;MY_LIBRARY_NULL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;typedef __something something;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;template&amp;lt;typedef T&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;retType MyClass::fnName()&lt;/code&gt;, and generic class member functions.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::thread&lt;/code&gt;&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://krashanoff.com/2021/11/08/idiomatic-semantics-in-golang/#fn3&quot; id=&quot;fnref3&quot;&gt;[3]&lt;/a&gt;&lt;/sup&gt; vs. &lt;code&gt;std::async&lt;/code&gt;&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://krashanoff.com/2021/11/08/idiomatic-semantics-in-golang/#fn4&quot; id=&quot;fnref4&quot;&gt;[4]&lt;/a&gt;&lt;/sup&gt; vs. &lt;code&gt;boost&lt;/code&gt;&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://krashanoff.com/2021/11/08/idiomatic-semantics-in-golang/#fn5&quot; id=&quot;fnref5&quot;&gt;[5]&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The two features that I personally noticed learning Go were the lack of a ternary operator and the lack of generics. However, the more Go I wrote, the less I found myself falling back on them. In place of ternary, one can use &lt;code&gt;if/else&lt;/code&gt;. Sure, it&#39;s at least five lines after &lt;code&gt;gofmt&lt;/code&gt;, but it reads idiomatically. In place of generics, we can use interfaces, which are implicitly implemented -- a far more flexible compromise than static assertions for polymorphic &amp;quot;&amp;quot;type bounds&amp;quot;&amp;quot;.&lt;/p&gt;
&lt;p&gt;This wasn&#39;t just in code I was writing while learning. Suddenly, contributions to Go projects were easier to read, even if they were authored by someone who started learning Go last week. Suddenly, errors were being managed and useless variables were being pruned not necessarily because programmers are keeping an eye out for them, but because &lt;em&gt;the program won&#39;t even compile without addressing them&lt;/em&gt;. Mix this with Go&#39;s emphasis on test-driven development, and source is enforcably safer.&lt;/p&gt;
&lt;p&gt;The Go programming language was designed by Google engineers who expect to write and maintain codebases with SLOC in the tens of thousands to drive complex systems in the highest-demand environments.&lt;/p&gt;
&lt;p&gt;Writing code the designers like might not be so bad after all.&lt;/p&gt;
&lt;hr class=&quot;footnotes-sep&quot; /&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/60561838&quot;&gt;https://stackoverflow.com/a/60561838&lt;/a&gt; referencing &lt;a href=&quot;https://golang.org/doc/faq#Does_Go_have_a_ternary_form&quot;&gt;https://golang.org/doc/faq#Does_Go_have_a_ternary_form&lt;/a&gt; &lt;a href=&quot;https://krashanoff.com/2021/11/08/idiomatic-semantics-in-golang/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn2&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;Rob Pike. Go at Google. &lt;a href=&quot;https://talks.golang.org/2012/splash.slide#10&quot;&gt;https://talks.golang.org/2012/splash.slide#10&lt;/a&gt; &lt;a href=&quot;https://krashanoff.com/2021/11/08/idiomatic-semantics-in-golang/#fnref2&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn3&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;C++&#39;s &lt;code&gt;std::thread&lt;/code&gt;. &lt;a href=&quot;https://en.cppreference.com/w/cpp/thread/thread&quot;&gt;https://en.cppreference.com/w/cpp/thread/thread&lt;/a&gt; &lt;a href=&quot;https://krashanoff.com/2021/11/08/idiomatic-semantics-in-golang/#fnref3&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn4&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;C++&#39;s &lt;code&gt;std::async&lt;/code&gt;. &lt;a href=&quot;https://en.cppreference.com/w/cpp/thread/async&quot;&gt;https://en.cppreference.com/w/cpp/thread/async&lt;/a&gt; &lt;a href=&quot;https://krashanoff.com/2021/11/08/idiomatic-semantics-in-golang/#fnref4&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn5&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;Boost&#39;s async ecosystem. &lt;a href=&quot;https://www.boost.org/doc/libs/1_35_0/doc/html/boost_asio/design/async.html&quot;&gt;https://www.boost.org/doc/libs/1_35_0/doc/html/boost_asio/design/async.html&lt;/a&gt; &lt;a href=&quot;https://krashanoff.com/2021/11/08/idiomatic-semantics-in-golang/#fnref5&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
  </entry>
  <entry>
    <title>Virtualizing a Minecraft Server on OpenBSD</title>
    <link href="https://krashanoff.com/2022/01/29/virtualizing-a-minecraft-server-on-openbsd/"/>
    <updated>2022-01-29T13:02:00Z</updated>
    <id>https://krashanoff.com/2022/01/29/virtualizing-a-minecraft-server-on-openbsd/</id>
    <content xml:lang="en" type="html">&lt;p&gt;Addendum 08 September 2022: as of OpenBSD 7.0, later versions of OpenJDK are supported, which means you can now natively run the Minecraft server that this post was setting up. This was brought to my attention by &lt;a href=&quot;https://www.lifewaza.com/&quot;&gt;Gabriel Guzman&lt;/a&gt;; thanks for the feedback!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;Thinking quickly, Dave constructs a homemade megaphone using only some string, a squirrel,
and a megaphone.&amp;quot;&lt;/em&gt;&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://krashanoff.com/2022/01/29/virtualizing-a-minecraft-server-on-openbsd/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Minecraft recently got its bump to version 1.18.1, and my girlfriend and I have been looking
for a way to play without running the server locally on my machine. I have an OpenBSD box (see
&lt;a href=&quot;https://krashanoff.com/2021/09/24/exploring-openbsd/&quot;&gt;my previous post&lt;/a&gt;) that I have been using for my remote
needs, so I figured I could run the server on it fairly easily.&lt;/p&gt;
&lt;h2 id=&quot;the-hardware&quot; tabindex=&quot;-1&quot;&gt;The Hardware&lt;/h2&gt;
&lt;p&gt;First, let&#39;s meet the lambo I plan to have running this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# top

...
CPU0 states:  ...
CPU1 states:  ...
Memory: Real: 82M/1782M act/tot Free: 6024M Cache: 1084M Swap: 0K/2818M
...

# df -h
Filesystem     Size    Used   Avail Capacity  Mounted on
/dev/ab0x      986M    107M    830M    11%    /
...
/dev/ab0y      9.4G    936M    8.1G    10%    /home
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Oh hell yes. Two cores. Like 8G of RAM. &lt;em&gt;Maybe&lt;/em&gt; 8G of disk space. We&#39;re gonna make this
thing work like Atlas.&lt;/p&gt;
&lt;h2 id=&quot;the-software&quot; tabindex=&quot;-1&quot;&gt;The Software&lt;/h2&gt;
&lt;p&gt;To get a Minecraft server running, all you need is the latest version of the JRE. For most
machines, this really isn&#39;t a problem. Java &lt;em&gt;does&lt;/em&gt; run on 3 billion devices&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://krashanoff.com/2022/01/29/virtualizing-a-minecraft-server-on-openbsd/#fn2&quot; id=&quot;fnref2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;, after
all. How bad could it be? Let&#39;s go ahead and check &lt;a href=&quot;http://ports.su/devel/jdk&quot;&gt;ports&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://krashanoff.com/static/img/mcbsd/jdkports.png&quot; alt=&quot;jdk 1.8 in openbsd ports&quot; /&gt;&lt;/p&gt;
&lt;p&gt;3 billion, it would seem, does not include OpenBSD. Well, not the latest version of Java, at least.
OpenBSD doesn&#39;t really have much in the way of modern luxury when it comes to Java. This is
in line with their philosophy, I mean think about how many damn licenses are sitting on a JRE.&lt;/p&gt;
&lt;p&gt;This said, I am not so headstrong as to port my own OpenJDK, not so eager to find a way to
use &lt;a href=&quot;https://openports.se/devel/jdk/17&quot;&gt;OpenPorts&lt;/a&gt;, and not so foolish as to use some weird hacky
stuff for running a &lt;code&gt;jar&lt;/code&gt;, so what&#39;s the solution here?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Isn&#39;t it so obvious? Just virtualize a Linux box!&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;enter%3A-vmm(4)&quot; tabindex=&quot;-1&quot;&gt;Enter: &lt;code&gt;vmm(4)&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;I decided to virtualize a lightweight Linux distribution inside of my OpenBSD box to run the latest
server, then NAT Minecraft clients to it.&lt;/p&gt;
&lt;p&gt;It&#39;s easier to virtualize hardware on OpenBSD than you might think. &lt;a href=&quot;https://man.openbsd.org/vmm.4&quot;&gt;&lt;code&gt;vmm(4)&lt;/code&gt;&lt;/a&gt;
provides capability in spades. All we need to do to enable it is add a line to our
&lt;a href=&quot;https://man.openbsd.org/rc.conf&quot;&gt;&lt;code&gt;rc.conf.local(8)&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;echo &amp;quot;vmd_flags=&amp;quot; &amp;gt;&amp;gt; /etc/rc.conf.local
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&#39;s go ahead and create our working directory and its virtual disk with &lt;a href=&quot;https://man.openbsd.org/vmctl.8&quot;&gt;&lt;code&gt;vmctl(8)&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# useradd -m -s /sbin/nologin /home/minecraft
# cd /home/minecraft
# vmctl create -s 5G minecraft.qcow2
vmctl: qcow2 imagefile created
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All we have to do now is just pick a Linux distribution to run on our (admittedly sparing) disk
space. All I really need is &lt;a href=&quot;https://www.alpinelinux.org/&quot;&gt;Alpine&lt;/a&gt;, since it supports the latest
JDK and keeps things tidy. After fetching the boot disk, the startup command isn&#39;t so bad:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# vmctl start -m 2G -L -i 1 -r alpine-virt-x86_64.iso \
  -d minecraft.qcow2 minecraft
vmctl: started vm 1 successfully, tty /dev/ttyp1
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-m 2G&lt;/code&gt;: 2G of memory.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-L&lt;/code&gt;: link over network. Basically spin up a subnet for the VM.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-i 1&lt;/code&gt;: one network interface.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-r&lt;/code&gt;: boot from an image.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All set.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# vmctl show
   ID   PID VCPUS  MAXMEM  CURMEM     TTY        OWNER    STATE NAME
    1 24772     1    2.0G   96.4M   ttyp1         root  running minecraft
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I won&#39;t lie, a 5G disk might be a bit pessimistic for how small we can get this thing, and 2G of memory
might be pushing it for a machine that&#39;s rocking the base amount that you&#39;d expect out of a nicer
Chromebook&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://krashanoff.com/2022/01/29/virtualizing-a-minecraft-server-on-openbsd/#fn3&quot; id=&quot;fnref3&quot;&gt;[3]&lt;/a&gt;&lt;/sup&gt;. We&#39;ll limit test later, though. Right now, there are more important matters to tend
to.&lt;/p&gt;
&lt;h2 id=&quot;nat&quot; tabindex=&quot;-1&quot;&gt;NAT&lt;/h2&gt;
&lt;p&gt;Before we can use our machine to reach the internet, we&#39;ve got to redirect traffic to it.
Time for &lt;a href=&quot;https://man.openbsd.org/pf&quot;&gt;&lt;code&gt;pf(4)&lt;/code&gt;&lt;/a&gt; to go to work. We add a rule to redirect traffic in
on port 25565, and allow outbound traffic.&lt;/p&gt;
&lt;p&gt;I don&#39;t run my server as a DNS cache, so the third rule (pulled from &lt;a href=&quot;https://xosc.org/vmm.html&quot;&gt;xhr&#39;s post&lt;/a&gt;)
maps DNS to &lt;a href=&quot;https://1.1.1.1/&quot;&gt;Cloudflare&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;match out on egress from $minecraft to any \
    nat-to egress
pass out on egress from $minecraft to any \
    nat-to egress
pass in proto udp from $minecraft to any port \
    domain rdr-to 1.1.1.1 port domain

pass in on egress proto tcp from any to (egress) \
    port { 25565 } rdr-to $minecraft
pass in on egress proto udp from any to (egress) \
    port { 25565 } rdr-to $minecraft
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Before putting these rules into action, make sure that we have IP forwarding enabled in
&lt;a href=&quot;https://man.openbsd.org/sysctl.conf.5&quot;&gt;&lt;code&gt;sysctl(5)&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# sysctl net.inet.ip.forwarding
net.inet.ip.forwarding=1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Networking is ready for our VM. Let&#39;s get to work.&lt;/p&gt;
&lt;h2 id=&quot;setup-alpine&quot; tabindex=&quot;-1&quot;&gt;&lt;code&gt;setup-alpine&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Time to get our virtual machine set up. We can hop into the VM&#39;s console, login as &lt;code&gt;root&lt;/code&gt;, and
run &lt;a href=&quot;https://wiki.alpinelinux.org/wiki/Installation&quot;&gt;&lt;code&gt;setup-alpine&lt;/code&gt;&lt;/a&gt; as usual.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# vmctl console minecraft
Connected to /dev/ttyp1 (speed 115200)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alpine&#39;s install is streamlined like OpenBSD&#39;s. Just page through with sane defaults and we&#39;re
set. Surprisingly, the arduous portion of this operation was just waiting for it to ping mirrors,
start chrony, all that good stuff.&lt;/p&gt;
&lt;p&gt;After that&#39;s all set, we have to install dependencies. The only dependency we really need to run
our Minecraft server is &lt;a href=&quot;https://pkgs.alpinelinux.org/package/edge/community/aarch64/openjdk17&quot;&gt;openjdk17&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Since this is available in community, we install it by specifying the repository:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;apk add openjdk17 --repository=https://pkgs.alpinelinux.org/package/edge/community/aarch64/openjdk17
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once that&#39;s done, we can check our version of the JRE.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# java --version
openjdk 17.0.2 2022-01-18
OpenJDK Runtime Environment (build 17.0.2+8-alpine-r0)
OpenJDK 64-Bit Server VM (build 17.0.2+8-alpine-r0, mixed mode, sharing)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Looking good. After downloading the latest Minecraft server &lt;code&gt;jar&lt;/code&gt; and prepping our server directory,
we just add the driver script for our preferred &lt;code&gt;java&lt;/code&gt; command as a start script in &lt;code&gt;/etc/local.d/&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;on-boot&quot; tabindex=&quot;-1&quot;&gt;On-Boot&lt;/h2&gt;
&lt;p&gt;If we want to let this run automatically, we&#39;re going to have to set up our VM to start on boot. This
is accomplished through &lt;a href=&quot;https://man.openbsd.org/vm.conf&quot;&gt;&lt;code&gt;vm.cfg(5)&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vm &amp;quot;minecraft&amp;quot; {
    memory 2G
    enable
    disk /home/minecraft/minecraft.qcow2
    local interface
    owner minecraft
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when we reboot, the machine will run at boot and run under the &lt;code&gt;minecraft&lt;/code&gt; user.&lt;/p&gt;
&lt;h2 id=&quot;limit-testing&quot; tabindex=&quot;-1&quot;&gt;Limit Testing&lt;/h2&gt;
&lt;p&gt;Surprisingly, the entire Alpine + JDK install only comes out to about 345MiB. The size of the minecraft
server installation on my Windows disk is about 391MB. So what we &lt;em&gt;really&lt;/em&gt; require in disk space is about
3G. If we really wanted to push it, we could go to about 2G.&lt;/p&gt;
&lt;p&gt;The amount of RAM the VM sips at idle is about ~300MB, so we could shove its RAM consumption down to
about 1.5G.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;athome# vmctl show minecraft
   ID   PID VCPUS  MAXMEM  CURMEM     TTY        OWNER    STATE NAME
    1 28555     1    1.5G    1.5G   ttyp1         root  running minecraft
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;...okay maybe we can&#39;t. I went ahead and upped the memory to around 3G and that seemed to do the trick
for the stock server command that grants the &lt;code&gt;jar&lt;/code&gt; about 1G of RAM.&lt;/p&gt;
&lt;h2 id=&quot;performance&quot; tabindex=&quot;-1&quot;&gt;Performance&lt;/h2&gt;
&lt;p&gt;And so comes the question: is it fast? Well, not really.&lt;/p&gt;
&lt;p&gt;I tested it out and saw a pretty &lt;em&gt;okay&lt;/em&gt; TPS, but it&#39;s clear that a Minecraft server wasn&#39;t meant to be
run on a virtual machine with meager resources allocated to it on an already-resource-limited host.
Notably, the whole server would eat dirt when transitioning between the Overworld and the Nether.&lt;/p&gt;
&lt;p&gt;Once chunks were loaded, performance wasn&#39;t an issue on the local network. Player activity was fairly
snappy. This said, the chunk load time being painful made me uncomfortable taking this Frankenstein
out of the lab. I just stuck with my own machine.&lt;/p&gt;
&lt;h2 id=&quot;conclusions-and-future-considerations&quot; tabindex=&quot;-1&quot;&gt;Conclusions and Future Considerations&lt;/h2&gt;
&lt;p&gt;Running a Minecraft server on a virtualized Alpine machine isn&#39;t a bad idea if you have the hardware
for it. I do not.&lt;/p&gt;
&lt;p&gt;In the future, I&#39;d like to upgrade my server hardware and try this again, experimenting with ways of
storing the Minecraft world folder in a host-system accessible folder. On any other virtualization
solution, this wouldn&#39;t be too hard, but OpenBSD&#39;s virtualization daemon doesn&#39;t support hardware
passthrough yet&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://krashanoff.com/2022/01/29/virtualizing-a-minecraft-server-on-openbsd/#fn4&quot; id=&quot;fnref4&quot;&gt;[4]&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Network passthrough is a breeze with &lt;a href=&quot;https://man.openbsd.org/pf&quot;&gt;&lt;code&gt;pf(4)&lt;/code&gt;&lt;/a&gt;, but the only viable option
for file-sharing between the two is through a network share like &lt;a href=&quot;https://linux.die.net/man/8/smbd&quot;&gt;&lt;code&gt;smbd(8)&lt;/code&gt;&lt;/a&gt;.
That would kill performance.&lt;/p&gt;
&lt;p&gt;I think that if I were to get this set up, I&#39;d just have a cronjob on the VM that periodically backs
up the Minecraft world at regular intervals over SSH to an S3 bucket with &lt;a href=&quot;https://rclone.org/&quot;&gt;&lt;code&gt;rclone(1)&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;#!/bin/sh
NAME=&amp;quot;backup-$(date +%D).tar.gz&amp;quot;
tar -czf $NAME /root/server
rclone copy $NAME s3:/minecraftWorlds/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Anyways, this was a fun little project and an educative experience. I may return to it to see if I
can improve performance on the little server that could™.&lt;/p&gt;
&lt;hr class=&quot;footnotes-sep&quot; /&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=d59J78yhwtg&quot;&gt;https://www.youtube.com/watch?v=d59J78yhwtg&lt;/a&gt; &lt;a href=&quot;https://krashanoff.com/2022/01/29/virtualizing-a-minecraft-server-on-openbsd/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn2&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://skeptics.stackexchange.com/a/9873&quot;&gt;https://skeptics.stackexchange.com/a/9873&lt;/a&gt; &lt;a href=&quot;https://krashanoff.com/2022/01/29/virtualizing-a-minecraft-server-on-openbsd/#fnref2&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn3&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;You&#39;d expect to see around 8GB in newer models. &lt;a href=&quot;https://zipso.net/chromebook-specs-comparison-table/&quot;&gt;https://zipso.net/chromebook-specs-comparison-table/&lt;/a&gt; &lt;a href=&quot;https://krashanoff.com/2022/01/29/virtualizing-a-minecraft-server-on-openbsd/#fnref3&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn4&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://www.reddit.com/r/openbsd/comments/ih4vns/pci_passthrough_on_vmm/&quot;&gt;https://www.reddit.com/r/openbsd/comments/ih4vns/pci_passthrough_on_vmm/&lt;/a&gt; &lt;a href=&quot;https://krashanoff.com/2022/01/29/virtualizing-a-minecraft-server-on-openbsd/#fnref4&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
  </entry>
  <entry>
    <title>Alternative Protocols for the WWW</title>
    <link href="https://krashanoff.com/2022/02/12/alternative-protocols-for-the-www/"/>
    <updated>2022-02-12T19:16:59Z</updated>
    <id>https://krashanoff.com/2022/02/12/alternative-protocols-for-the-www/</id>
    <content xml:lang="en" type="html">&lt;p&gt;I saw a strange link on a GitHub repo the other day that was prefixed with &lt;code&gt;gemini://&lt;/code&gt;.
I was confused and tried looking up &amp;quot;gemini protocol&amp;quot; online, but to no avail. I brushed
it off as a weird startup alternative to HTTP and went on with my day.&lt;/p&gt;
&lt;p&gt;That was, until my friend Waylon&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://krashanoff.com/2022/02/12/alternative-protocols-for-the-www/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt; shot me a message a week or two later:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;waylon — 02/09/2022
have you seen this https://gemini.circumlunar.space/

leo — 02/09/2022
I&#39;ve heard about Gemini
Hmmmm haven&#39;t seen a lot
Lemme read
So better HTTP?
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;So better HTTP?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ehhhh, no. With some closer investigation, it&#39;s an alternative protocol for the web. It&#39;s still
focused on delivering content, but just in a more privacy-motivated, cozy way. You can write a
server or client for it &lt;em&gt;very&lt;/em&gt; simply in only a handful of lines in almost any language. You can
write a fully-fleshed out client in maybe 100 or 200 SLOC&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://krashanoff.com/2022/02/12/alternative-protocols-for-the-www/#fn2&quot; id=&quot;fnref2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Here&#39;s an &lt;code&gt;inetd&lt;/code&gt;-compatible &amp;quot;&amp;quot;server&amp;quot;&amp;quot; in POSIX-compliant shell I wrote in a minute or two:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;#!/bin/sh
chdir $1
shift

if [ $# -ne 1 ]; then
  echo -n &amp;quot;50 Ill-formatted request&amp;quot;
  exit 0
fi

uri=$(printf &#39;%b\n&#39; &amp;quot;$@&amp;quot; | sed -n &#39;s/^gemini:\/\/.*\/\(.*\)$/\1/p&#39;)

if ! [ -r $uri ]; then
  echo -n &amp;quot;40 Page does not exist\r\n&amp;quot;
  exit 0
fi

MIME=&amp;quot;$(file -b --mime-type $uri)&amp;quot;
if echo &amp;quot;$uri&amp;quot; | grep -q &amp;quot;.*\.gmi&amp;quot;; then
  MIME=&amp;quot;text/gemini&amp;quot;
fi

echo -n &amp;quot;20 $MIME;\r\n&amp;quot;
cat $uri
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To use this you would just add a line to your &lt;code&gt;/etc/inetd.conf&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;127.0.0.1:1965  stream  nowait  gemini  /path/to/gemini.sh gemini.sh /path/to/chdir
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This would produce some request-response behavior like this (&lt;code&gt;\r\n&lt;/code&gt; included for
legibility):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;REQUEST
/index.gmi\r\n

&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;RESPONSE
20 text/gemini;\r\n
hi there
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I say &amp;quot;&amp;quot;server&amp;quot;&amp;quot; though because it only really just serves the file at a given URI with pretty
minimal URI validation. There&#39;s no meaningful logging. Also, you would need a relay for TLS
(so you&#39;d probably want to remap your server port to something else). If you&#39;re using &lt;code&gt;inetd&lt;/code&gt;,
though, you probably have one of those. It isn&#39;t the prettiest solution on Earth, but it &lt;em&gt;could&lt;/em&gt;
get the job done.&lt;/p&gt;
&lt;p&gt;For my purposes, I happened to be looking for a more personal way of blogging without making it
HTTP-scrapable. Gemini provides its own integrated markdown-esque markup language for text content,
so things clicked. There&#39;s all kinds of different protocols for this stuff, though. IPFS is
an alternative I considered. Adjacent to Gemini specifically, Gopher comes to mind.&lt;/p&gt;
&lt;h2 id=&quot;gemini-%2B-gopher&quot; tabindex=&quot;-1&quot;&gt;Gemini + Gopher&lt;/h2&gt;
&lt;p&gt;You don&#39;t always need a dozen headers or a packed format with a binary BNF grammar to describe
a text file to a requester. I think that&#39;s kind of the point of these new alternative protocols
-- levering modern technologies to make &amp;quot;the web&amp;quot; more accessible and a little less centralized.&lt;/p&gt;
&lt;p&gt;Gemini is, in my eyes, one of the most straightforward protocols around when it comes to this.
It doesn&#39;t bother trying to be anything it isn&#39;t.&lt;/p&gt;
&lt;p&gt;No JS means there&#39;s no interactivity, really, but that&#39;s not an issue if your
content is static. No CSS means there&#39;s no definitive style, but that&#39;s also not
an issue if your content is static -- the user&#39;s client can determine how it should look.&lt;/p&gt;
&lt;p&gt;At a technical level, there&#39;s already so much abstraction afforded in TCP sockets and TLS
alone, so why bother with adding all of this extra stuff when the ultimate goal of the
protocol is to serve largely text-based content?&lt;/p&gt;
&lt;p&gt;How far out can we push this line of power-to-weight&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://krashanoff.com/2022/02/12/alternative-protocols-for-the-www/#fn3&quot; id=&quot;fnref3&quot;&gt;[3]&lt;/a&gt;&lt;/sup&gt;, though? Things get weird when
you start looking at Gopher.&lt;/p&gt;
&lt;p&gt;Gopher was designed a sort of alternative to HTTP. They were both around in the same
era, and both got a reasonable amount of publicity. I&#39;m too young to ever know &amp;quot;The
Gopher Protocol&amp;quot; was a serious contender for the web, but it was.&lt;/p&gt;
&lt;p&gt;Its markup is stripped down compared to HTML, and it revolves around the notion of menu-based
browsing. There&#39;s this packed, but semi-legible construct that it uses in responses to
describe menus (pulled from &lt;a href=&quot;https://en.wikipedia.org/wiki/Gopher_(protocol)&quot;&gt;Wikipedia&lt;/a&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;REQUEST
/Reference

&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;RESPONSE
1CIA World Factbook     /Archives/mirrors/textfiles.com/politics/CIA    gopher.quux.org 70
0Jargon 4.2.0   /Reference/Jargon 4.2.0 gopher.quux.org 70      +
1Online Libraries       /Reference/Online Libraries     gopher.quux.org 70     +
1RFCs: Internet Standards       /Computers/Standards and Specs/RFC      gopher.quux.org 70
1U.S. Gazetteer /Reference/U.S. Gazetteer       gopher.quux.org 70      +
iThis file contains information on United States        fake    (NULL)  0
icities, counties, and geographical areas.  It has      fake    (NULL)  0
ilatitude/longitude, population, land and water area,   fake    (NULL)  0
iand ZIP codes. fake    (NULL)  0
i       fake    (NULL)  0
iTo search for a city, enter the city&#39;s name.  To search        fake    (NULL) 0
ifor a county, use the name plus County -- for instance,        fake    (NULL) 0
iDallas County. fake    (NULL)  0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Don&#39;t look at it too long. It&#39;s easy to understand why it lost out against HTTP.&lt;/p&gt;
&lt;p&gt;The formatting of Gophertext is reminiscent of &lt;code&gt;troff&lt;/code&gt;&#39;s syntax. The user requests the &lt;code&gt;Reference&lt;/code&gt;
menu, in plaintext then the server replies with different resources (their types indicated by the
prefixed number), menus, and submenus (&lt;code&gt;i&lt;/code&gt;). To an untrained eye, there&#39;s these strange keywords
&amp;quot;fake&amp;quot; and &amp;quot;(NULL)&amp;quot; popping up all over, references to proxy servers. It&#39;s just... strange.&lt;/p&gt;
&lt;p&gt;There isn&#39;t really much in the way of security for the protocol, and there are unofficial,
somewhat-community-accepted extensions to it for things like media files and binaries.
Overall, it feels like a somewhat reasonable protocol that lost its focus as new things
needed to be incorporated into it.&lt;/p&gt;
&lt;p&gt;Its markup is restrained, but wanted to compete with HTML. It wanted to incorporate new media
types, but to do that, it had to incorporate new prefix codes. And once the protocol itself
changes at a fundamental level like that, it&#39;s pretty difficult to propagate that change across
the web. Meanwhile in HTTP or Gemini, you simply change the MIME type field. Overall, it&#39;s a cool idea, but
with all of these dangling bits it may be a bit of an anachronism and a case study in protocol
design.&lt;/p&gt;
&lt;p&gt;These ideas of alternative protocols still catch my eye, though. They&#39;re reminiscent of
a web that didn&#39;t have a notion of CSS, or JS, or really any moving parts.&lt;/p&gt;
&lt;p&gt;It makes you wonder. How different would the Internet be if these protocols had
won out? How would we handle the features that are ubiquitous in the WWW today like CSS
for styling and JS for interactivity?&lt;/p&gt;
&lt;h2 id=&quot;the-real-web3&quot; tabindex=&quot;-1&quot;&gt;The &lt;em&gt;Real&lt;/em&gt; Web3&lt;/h2&gt;
&lt;p&gt;After Waylon and I chatted for a bit about the Gemini specification, a fun thought experiment
began.&lt;/p&gt;
&lt;p&gt;What if we abandoned what we have today to completely redesign the web? No HTTP. No HTML.
No CSS. No JavaScript. Completely from scratch, but with our lessons-learned from the
present.&lt;/p&gt;
&lt;p&gt;Well for one, we wouldn&#39;t be throwing out IP. Maybe if we were ambitious we&#39;d redesign it
such that all computers use IPv6, but a flag day is impossible now.&lt;/p&gt;
&lt;p&gt;More realistically, I think application-level protocols would be a lot more modular with a
security-first design -- kind of like QUIC. Hosts can stream data between each other on a lighter
protocol that is designed to handle congestion control.&lt;/p&gt;
&lt;p&gt;The deep point of discussion, though, is how websites could be rendered without HTML. The one that
seemed to hold our attention best was:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;waylon — 02/09/2022
what if you had something like this
(except not with HTML primitives)
and instead of serving HTML
web servers served this
and browsers executed it to build a website
I mean that&#39;s basically react

I guess what we&#39;re doing is just React but cutting out the
js part and pretending HTML doesn&#39;t exist 🤔
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So basically what &lt;a href=&quot;https://github.com/DioxusLabs/dioxus&quot;&gt;dioxus&lt;/a&gt; is doing: compile down your
dynamically-rendered JSX-like statically-typed markup into some WebAssembly. Dodge the JS runtime
bullet and roll your own from scratch.&lt;/p&gt;
&lt;p&gt;This would open up a few interesting discussions about website performance as more ambitious devs
try to roll their own WebAssembly, but I don&#39;t think it&#39;d be any different than devs who
roll their own HTTP servers these days.&lt;/p&gt;
&lt;p&gt;I encounter problems thinking about this in the same way that I encounter problems trying to
think in more than 3 dimensions. HTML is all I know. React is all I know. For the current web,
it&#39;s the same deal. WebAssembly is a step in the right direction of speeding up
and broadening the spectrum of dynamic content on the web, but it&#39;s still served as a complement
to JavaScript&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://krashanoff.com/2022/02/12/alternative-protocols-for-the-www/#fn4&quot; id=&quot;fnref4&quot;&gt;[4]&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;I am skeptical that we&#39;ll see a serious transition to a brand new protocol
like QUIC or an exodus from the de jure languages of the web for a long time. To do so would be like
switching the web to IPv6, which - like I said - I&#39;m fairly certain won&#39;t be happening anytime soon...
Maybe ever.&lt;/p&gt;
&lt;p&gt;These new protocols are around the block, and they won&#39;t be replacing anything that&#39;s already
around, but it&#39;s a lot of fun exploring that big &lt;em&gt;&amp;quot;what if&amp;quot;&lt;/em&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;I might update this article later on.&lt;/p&gt;
&lt;hr class=&quot;footnotes-sep&quot; /&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;Waylon is one of the smartest people I know. &lt;a href=&quot;https://www.waylonpeng.com/&quot;&gt;https://www.waylonpeng.com/&lt;/a&gt;. &lt;a href=&quot;https://krashanoff.com/2022/02/12/alternative-protocols-for-the-www/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn2&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://gemini.circumlunar.space/&quot;&gt;https://gemini.circumlunar.space/&lt;/a&gt; &lt;a href=&quot;https://krashanoff.com/2022/02/12/alternative-protocols-for-the-www/#fnref2&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn3&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;The Gemini docs describe it as &amp;quot;a new internet protocol which ... strives for maximum power to weight ratio&amp;quot; &lt;a href=&quot;https://krashanoff.com/2022/02/12/alternative-protocols-for-the-www/#fnref3&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn4&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;MDN describes it as complementary to JavaScript. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly&quot;&gt;https://developer.mozilla.org/en-US/docs/WebAssembly&lt;/a&gt; &lt;a href=&quot;https://krashanoff.com/2022/02/12/alternative-protocols-for-the-www/#fnref4&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
  </entry>
  <entry>
    <title>Protobufs, QUIC, Rust, and Qt</title>
    <link href="https://krashanoff.com/2022/04/08/protobufs-quic-rust-and-qt/"/>
    <updated>2022-04-08T05:34:15Z</updated>
    <id>https://krashanoff.com/2022/04/08/protobufs-quic-rust-and-qt/</id>
    <content xml:lang="en" type="html">&lt;p&gt;What if we wrote an open-source Discord?&lt;/p&gt;
&lt;p&gt;I was trying to write a small communication client/server for my girlfriend and I in my spare time.
We would just use it for text chat or voice chat. At the beginning, I didn&#39;t have much of a purpose for
writing it aside from running away from Discord after they started talking about NFTs, but I eventually
made it my goal to make it as intricate as possible - a polyglot project. I never actually finished it,
but it left me with lessons in working with intricate software.&lt;/p&gt;
&lt;p&gt;For an application that might transport things like photos, videos, or voice communications,
security is pretty paramount. One aspect of security is &lt;em&gt;whose hands the data is in&lt;/em&gt;. For
my purposes of chatting with friends, family, etc., I&#39;d like to keep it in my own. This meant the
servers would be self-hosted, and should be designed with this in mind. I have been writing a
lot of Rust, so I figured I would write the server in Rust. To keep the code easy-to-maintain,
I would make the server async.&lt;/p&gt;
&lt;p&gt;I also wanted the client applications to be performant. There isn&#39;t much wiggle room on this
front. Pretty much the only good-looking, non-web-based GUI framework these days is Qt, which
only &lt;em&gt;really&lt;/em&gt; works if you&#39;re writing your application in C++ (although there are some high-quality
bindings to other programming languages).&lt;/p&gt;
&lt;p&gt;Rust and C++ serialization formats don&#39;t exactly play well together, though. This meant I needed a
lingua-franca for the two to communicate with one another on the wire. I
settled on QUIC-transported protobufs for speed and security. The rest of this entry will be some
thoughts on how I built this toolchain on Windows and Mac, and the hardships I encountered throughout.&lt;/p&gt;
&lt;h2 id=&quot;on-quic&quot; tabindex=&quot;-1&quot;&gt;On QUIC&lt;/h2&gt;
&lt;p&gt;Choosing QUIC was a good call. QUIC is secure by default and designed with speed in mind. It enforces use of
TLS, and keeps things speedy by modeling network communications between computers as multiple simultaneous, uni-or-bidirectional
streams over a UDP &amp;quot;connection&amp;quot;. Since packets don&#39;t need to all be delivered in order, multiple streams can
be processed concurrently. This gave me a lot of freedom in how I modeled the endpoints
for communication between client and server.&lt;/p&gt;
&lt;p&gt;I treated the server as though it were a single endpoint, where each stream ID per-client dictated the type of traffic
involved. This proved to be more of a headache than I thought, as QUIC streams aren&#39;t exactly opened and
closed like TCP sockets, but instead treated like green threads. You won&#39;t get a specific ID unless you
ask explicitly for it. This is why QUIC is superior to TCP, but also what makes it more complex.&lt;/p&gt;
&lt;p&gt;The big thing I didn&#39;t anticipate is that &lt;strong&gt;QUIC has weird libraries!&lt;/strong&gt; QUIC is a protocol that was designed
to be testable, which means that all the libraries out there are Bring Your Own IO. The problem with this is that
libraries are pretty pigeonholed into working something like this:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mermaid.live/edit#pako:eNqdkr9OAzEMxl8l8lSk8gI3VELAwIgQ2y1W4juiXuw0cVqhqu9OruQqEB2ADBn8ff75y58jWHEEHWTaFWJLDx7HhKFnU1fEpN76iKzmLsafxefXp_vP6iQSDTrjefDstTSCmftuN5u6dyaR3Q9JwurmuzhTzir5Pbk6wG5JF8ssXjwxiaWcr1mWIdfQI6lhOtRwVoLn8dzRIPkXlJYerRqVStKDpO31QUwJ9XKI_OeIUnSU_0bMxE5l9bW1XXUVYA2BUkDv6nMf53IP-kaBeqgwcDRgmbSHnk_VWqKr53h0XiVBN-CUaQ1YVF7e2UKnqdBial-muU4fqdK4sQ&quot;&gt;&lt;img src=&quot;https://mermaid.ink/img/pako:eNqdkr9OAzEMxl8l8lSk8gI3VELAwIgQ2y1W4juiXuw0cVqhqu9OruQqEB2ADBn8ff75y58jWHEEHWTaFWJLDx7HhKFnU1fEpN76iKzmLsafxefXp_vP6iQSDTrjefDstTSCmftuN5u6dyaR3Q9JwurmuzhTzir5Pbk6wG5JF8ssXjwxiaWcr1mWIdfQI6lhOtRwVoLn8dzRIPkXlJYerRqVStKDpO31QUwJ9XKI_OeIUnSU_0bMxE5l9bW1XXUVYA2BUkDv6nMf53IP-kaBeqgwcDRgmbSHnk_VWqKr53h0XiVBN-CUaQ1YVF7e2UKnqdBial-muU4fqdK4sQ&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There were a few libraries that handle the IO for you, but there really weren&#39;t
enough &lt;strong&gt;high-level, easy to use libraries&lt;/strong&gt; out there in the same way that there are for protocols like RTMP.
There&#39;s Amazon&#39;s &lt;code&gt;s2n&lt;/code&gt;, but the library doesn&#39;t allow the user a great degree of control over the granularity of parallelism,
favoring a massively-parallel green-thread approach. The best one riding that fine line that I found was Cloudflare&#39;s &lt;code&gt;quiche&lt;/code&gt;, although this too had its shortcomings&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://krashanoff.com/2022/04/08/protobufs-quic-rust-and-qt/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt; in the form of C-friendly event-loop-style packet processing.&lt;/p&gt;
&lt;p&gt;Quiche aside, I played around with almost &lt;em&gt;every major QUIC library&lt;/em&gt; just to get a feel for how they worked. I tried MsQuic and Quiche on my GUI;
Quiche, Quinn, and s2n on my Rust backend; quic-go on a tiny little Go client for testing; and aioquic on another
Python client that I built for testing. Overall, it was an insane amount of work for what felt like minimal payoff
when I just came back to using Quiche. Here are a few thoughts on each of these, though:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Language(s)&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Review&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/cloudflare/quiche&quot;&gt;Quiche&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Rust, C/C++&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Good, but verbose&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/quinn-rs/quinn&quot;&gt;Quinn&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Rust&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Where&#39;s the &lt;em&gt;real&lt;/em&gt; entry point for the library?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/aws/s2n-quic&quot;&gt;s2n&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Rust&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Good, but maybe a little &lt;em&gt;too&lt;/em&gt; abstract. Almost every single part of the library is carried out on its own async task.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/lucas-clemente/quic-go&quot;&gt;quic-go&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Go&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Easy to use&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/aiortc/aioquic&quot;&gt;aioquic&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Confusing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/microsoft/msquic&quot;&gt;MsQuic&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;C/C++&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;OK, but the use of a function table and registry is confusing&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;on-protobufs&quot; tabindex=&quot;-1&quot;&gt;On Protobufs&lt;/h2&gt;
&lt;p&gt;Again, the right call was protobufs. The serialization format is well-defined and easily interoperable
with other languages like Python and Go. There are also unofficial extensions to allow protobufs to
operate within Rust.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Deploying&lt;/em&gt; protobufs was a little more trouble than I thought it would be, though -- especially on Windows.
When I was building the library, I had to sit there and agonize about which linker I was using.
After pulling your hair out over which linker is the same one that Qt is using, then you have to find out
whether the linker is building the library multithreaded or not, then override flags in the Qt Makefile
configuration to fix the link issue.&lt;/p&gt;
&lt;p&gt;In my case, protobufs was being built singlethreaded, but my Qt application was not. I wanted to
statically-link the library, though, so I disabled the multithreaded linking.&lt;/p&gt;
&lt;h2 id=&quot;on-async-rust&quot; tabindex=&quot;-1&quot;&gt;On Async Rust&lt;/h2&gt;
&lt;p&gt;My initial architecture for the Rust-based server was programmatically intuitive, at expense
of design complexity. Each time the server received a connection, it spawn
off a data structure to handle future requests from the client. The structure can send the &amp;quot;conductor&amp;quot;
messages through its transmitting MPSC channel, and handle incoming messages through its receiving channel.
Then when we need to talk to the individual client from the conductor, we fetch its sender handle.&lt;/p&gt;
&lt;p&gt;This established a strong separation of concerns and was motivated by the idea of ensuring that the bottleneck for the program was in the QUIC
state manager - not the database operations or global state updates. Frogs could handle the
operation requested by the client on their own time, then send the messages back to the
&lt;code&gt;Bullfrog&lt;/code&gt; to relay.&lt;/p&gt;
&lt;p&gt;Something that I overlooked when building this though was the overhead from the async runtime.
All those channels moving data across thread boundaries is &lt;em&gt;expensive&lt;/em&gt;, even for something in
Rust. Two great quotes came to mind while I was building this ridiculously complicated setup.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Think of it this way: threads are like salt, not like pasta. You like salt, I like salt, we all like salt. But we eat more pasta.&lt;/p&gt;
&lt;p&gt;— Larry McVoy&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://krashanoff.com/2022/04/08/protobufs-quic-rust-and-qt/#fn2&quot; id=&quot;fnref2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;A computer is a state machine. Threads are for people who can&#39;t program state machines.&lt;/p&gt;
&lt;p&gt;— Alan Cox&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://krashanoff.com/2022/04/08/protobufs-quic-rust-and-qt/#fn2&quot; id=&quot;fnref2:1&quot;&gt;[2:1]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The second one really started to stick with me when I went back to review the architecture of
the server source given in the official Quiche examples. Their server is a simple state machine.
I tried refactoring mine to reflect this, but managing futures for database transactions proved
a headache.&lt;/p&gt;
&lt;p&gt;In an unexpected turn, I settled on using Amazon&#39;s &lt;code&gt;s2n-quic&lt;/code&gt; and its massively-parallel approach.
It was just easier to use, but the problem was that maintaining shared state became expensive for the
same reasons I encountered in my original approach.&lt;/p&gt;
&lt;h2 id=&quot;on-qt&quot; tabindex=&quot;-1&quot;&gt;On Qt&lt;/h2&gt;
&lt;p&gt;Qt is pretty much the only GUI framework that isn&#39;t web-based. I like the ideas presented by projects like iced or yew, but they are still, ultimately, web technologies. I don&#39;t really wanna deal with a JS interpreter or JIT compiler - give me native widgets, please. Qt&#39;s new markup language, QML, is a lot higher level than the widgets bindings, but
computationally more expensive. Under the hood, it uses OpenGL and what amounts to a stripped-down web engine - the very thing I was trying to avoid from the get-go.&lt;/p&gt;
&lt;p&gt;In keeping with my goal of making the application as lightweight as possible, I opted to use
widgets, but designing my components to be QML-compatible as well. This is accomplished with macros in header files
for Qt types.&lt;/p&gt;
&lt;p&gt;I like the ideas of Qt. It&#39;s a very easy-to-grasp parallel GUI framework that lets
the developer do pretty much anything they want to...&lt;/p&gt;
&lt;p&gt;...except capture AV.&lt;/p&gt;
&lt;p&gt;In Qt6, they have done no favors in making it easy to access the underlying frames of a camera or the PCM audio. They have this
brand new thing &lt;code&gt;QMediaCaptureSession&lt;/code&gt;, and they &lt;em&gt;really&lt;/em&gt; want you to use their &lt;code&gt;QMediaRecorder&lt;/code&gt; class to record
videos and stuff. The problem is that there&#39;s almost &lt;strong&gt;zero&lt;/strong&gt; extensibility in the &lt;code&gt;QMediaRecorder&lt;/code&gt; class. There&#39;s no
way for the developer to implement their own. I had middling success implementing a &lt;code&gt;QVideoSink&lt;/code&gt; and &lt;code&gt;QAudioSink&lt;/code&gt; to catch the recording output, but I think I&#39;d just use &lt;code&gt;ffmpeg&lt;/code&gt; instead.&lt;/p&gt;
&lt;h2 id=&quot;takeaways&quot; tabindex=&quot;-1&quot;&gt;Takeaways&lt;/h2&gt;
&lt;p&gt;I didn&#39;t really do much! I just kinda explored a bunch of different technologies and tried - to varying levels of success - to use them all together. GUI is hard; capturing A/V from C++ is hard; emerging protocols are still getting their footing.&lt;/p&gt;
&lt;p&gt;Writing projects that bridge languages isn&#39;t too hard as long as you have a lingua franca for them to speak over the network or interprocess. There&#39;s a great read about that somewhere&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://krashanoff.com/2022/04/08/protobufs-quic-rust-and-qt/#fn3&quot; id=&quot;fnref3&quot;&gt;[3]&lt;/a&gt;&lt;/sup&gt;. In my case, I used protobufs on QUIC, and it worked pretty well. For future projects, I would likely avoid QUIC as the libraries aren&#39;t high-level enough yet that they&#39;re ergonomic to use.&lt;/p&gt;
&lt;p&gt;There&#39;s also the issue of deployment. Protobufs were difficult to deploy on machines that run Windows, as static linkage issues were pretty common. On OSX/UNIX-like, it was a breeze.&lt;/p&gt;
&lt;p&gt;I like the ideas in Qt - conceptually they are powerful - however the lack of extensibility for the &lt;code&gt;QMediaRecorder&lt;/code&gt; type made native audio and video capture pretty difficult. It wasn&#39;t exactly friendly to streaming AV capture. I would rather do the project in something like Python with Qt bindings or maybe something that uses &lt;a href=&quot;https://gstreamer.freedesktop.org/&quot;&gt;GStreamer&lt;/a&gt;, I think. With PyQt, I could do more intricate image processing of live captures with something like pillow. The only concern there is performance and deployment woes.&lt;/p&gt;
&lt;p&gt;This project will likely be retired, but in any case, it was a good experience being able to explore new technologies and tying heterogeneous programs together.&lt;/p&gt;
&lt;hr class=&quot;footnotes-sep&quot; /&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/cloudflare/quiche/pull/1085&quot;&gt;https://github.com/cloudflare/quiche/pull/1085&lt;/a&gt; &lt;a href=&quot;https://krashanoff.com/2022/04/08/protobufs-quic-rust-and-qt/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn2&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;Both of these quotes are from the Qt wiki, actually. &lt;a href=&quot;https://wiki.qt.io/Threads_Events_QObjects&quot;&gt;https://wiki.qt.io/Threads_Events_QObjects&lt;/a&gt; &lt;a href=&quot;https://krashanoff.com/2022/04/08/protobufs-quic-rust-and-qt/#fnref2&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt; &lt;a href=&quot;https://krashanoff.com/2022/04/08/protobufs-quic-rust-and-qt/#fnref2:1&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn3&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://gankra.github.io/blah/c-isnt-a-language/&quot;&gt;https://gankra.github.io/blah/c-isnt-a-language/&lt;/a&gt; &lt;a href=&quot;https://krashanoff.com/2022/04/08/protobufs-quic-rust-and-qt/#fnref3&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
  </entry>
  <entry>
    <title>Bandwidth vs. Quality of Life</title>
    <link href="https://krashanoff.com/2022/05/25/bandwidth-vs-quality-of-life/"/>
    <updated>2022-05-25T05:00:00Z</updated>
    <id>https://krashanoff.com/2022/05/25/bandwidth-vs-quality-of-life/</id>
    <content xml:lang="en" type="html">&lt;p&gt;I have been terminally online since my sophomore year of high school. COVID didn&#39;t help much when I had to move back home. I don&#39;t exactly live in &amp;quot;the sticks&amp;quot;, but I live far enough away from a major data center that ISPs are comfortable being predatory with us. Ever since high school I&#39;ve had a hard cap of about a terabyte on monthly data usage. This was not only for me, but for the whole household, which made things difficult.&lt;/p&gt;
&lt;p&gt;Every month, I would get an email when we were approaching that data cap. That email had been a staple of every single month.&lt;/p&gt;
&lt;p&gt;Things changed pretty drastically in the past month or so, though. For one, I graduated college in March. I moved back home without my desktop, and don&#39;t really have a place to be online all day.&lt;/p&gt;
&lt;p&gt;I also started full-time work. I have much less time to program for fun. I also had less time to watch anime, or watch Internet videos, or really whatever my hobbies might entail.&lt;/p&gt;
&lt;p&gt;You can imagine my surprise when, for the first time in a long time, I didn&#39;t get an email from our ISP telling me that we were close to exceeding our monthly data plan.&lt;/p&gt;
&lt;p&gt;My browsing habits had changed. Though I had lost my desktop, I had begun using my server more for high-bandwidth jobs that I could offload. I checked this computer far less often, and when I did, it was over SSH.&lt;/p&gt;
&lt;p&gt;It makes me wonder about the advantages of a lower bandwidth life. There&#39;s less to spread your focus thin and encourages you to use the resources at your disposal. Instead of Googling something, I can just use the manpages or local doc server. Instead of watching the first episode of every seasonal anime, I can just watch a couple episodes of one that already aired, and just chip away at it.&lt;/p&gt;
&lt;p&gt;It&#39;s attractive enough that I&#39;m contemplating some more drastic changes. I could start taking notes on pen-and-paper again, or journal or something. Maybe I&#39;ll revive the old Nokia cell phone we&#39;ve got sitting around and, with an older MP3 player, and get rid of my smartphone.&lt;/p&gt;
&lt;p&gt;Hell, maybe I&#39;ll even &lt;em&gt;read a book&lt;/em&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Libav is complicated</title>
    <link href="https://krashanoff.com/2022/06/30/libav-is-complicated/"/>
    <updated>2022-06-30T07:00:00Z</updated>
    <id>https://krashanoff.com/2022/06/30/libav-is-complicated/</id>
    <content xml:lang="en" type="html">&lt;p&gt;Libav is the crustiest library I have ever used. In a cruel paradox, it is also the state of the art in multimedia processing. Nothing comes close in performance and capability. I have been trying to write a program using it and have since gained an understanding of how to use it (kind of). With use, I feel my appreciation swelling for it, but it is still quite the complicated beast.&lt;/p&gt;
&lt;p&gt;First, let&#39;s discuss the chaos that is &amp;quot;libav&amp;quot;. The library behind FFMPEG is called &amp;quot;libav&amp;quot;. Most of the library components follow the same pattern: &amp;quot;libavdevice, libavutil&amp;quot;, etc. Long ago, when FFMPEG was getting some traction, some folks forked the library component of it and tried to make it easier to use, or something... This mysterious spinoff was -- as in the infinite wisdom of the universe -- &lt;em&gt;also&lt;/em&gt; named &amp;quot;libav&amp;quot;.&lt;/p&gt;
&lt;p&gt;libav (the forked one) is no longer under development, as far as I can tell. The last release was in 2018. The last commit to &lt;code&gt;master&lt;/code&gt; was in 2019. My brain is still stuck in the 2010s, so I have to remind myself that&#39;s &lt;strong&gt;three years without a commit&lt;/strong&gt;. That seems pretty abandoned to me.&lt;/p&gt;
&lt;p&gt;Normally, when a fork of a major project ceases development, it&#39;s no big deal, but it poses a challenge for developers; particularly when they need help. Google something about &amp;quot;libav&amp;quot; and look for a StackOverflow answer. It&#39;s a russian roulette of whether the answer you&#39;re going to get is about &amp;quot;libav&amp;quot; or &lt;em&gt;&amp;quot;libav&amp;quot;&lt;/em&gt;.&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://krashanoff.com/2022/06/30/libav-is-complicated/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Another complicated part: the eager developer might run into is that the documentation of the actual libav is terse. It is so distilled, so crystallized, that it takes a lot of careful inference and/or luck to get the hang of. There&#39;s also quite a few structure-specific quirks. For example, &lt;code&gt;AVChannelLayout&lt;/code&gt; is a member of a few different data structures, and is initialized with some predefined initializers. Unlike structures in libav initialized with predefined constants, though, it must be copied with a specific function, and uninitialized with another.&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://krashanoff.com/2022/06/30/libav-is-complicated/#fn2&quot; id=&quot;fnref2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://krashanoff.com/static/img/libav/avchannel.png&quot; alt=&quot;documentation for avchannel&quot; /&gt;&lt;/p&gt;
&lt;p&gt;There are also a few missing features from the library. For one, &lt;a href=&quot;https://trac.ffmpeg.org/wiki/DirectShow#Howtoprogrammaticallyenumeratedevices&quot;&gt;there is no way to programmatically enumerate devices&lt;/a&gt;. Instead, the programmer could either shell out to &lt;code&gt;ffmpeg&lt;/code&gt;, defeating the purpose of using libav in most cases, or install a log capture handler via &lt;a href=&quot;https://ffmpeg.org/doxygen/trunk/group__lavu__log.html#ga14034761faf581a8b9ed6ef19b313708&quot;&gt;&lt;code&gt;log_set_callback()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The final barrier to entry is building the library into software. Engineering complex software in C/C++ is pretty hard to get right, but baking it all together in the right ways on every platform is especially difficult. This is why almost all modern programming languages have their own toolchain that manages the compilation and linking for you. libav is designed to build on a whole lot of platforms, though, and not many programming languages short of Go can make claims to C&#39;s throne of portability.&lt;/p&gt;
&lt;p&gt;Building &lt;code&gt;ffmpeg&lt;/code&gt; is actually incredibly easy if you have the dependencies on your system; just &lt;code&gt;./configure &amp;amp;&amp;amp; make&lt;/code&gt; like any other. Even if you don&#39;t have all the dependencies, you can avoid their use by just disabling them in your call to &lt;code&gt;configure&lt;/code&gt;. To build it into another piece of software using something like CMake, the developer is kind of on their own with linking in all the required dependencies of the libraries. I ended up using &lt;code&gt;pkg-config&lt;/code&gt;. To point &lt;code&gt;pkg-config&lt;/code&gt; in the right direction in CMake, though, one has to set the &lt;code&gt;PKG_CONFIG_PATH&lt;/code&gt;. My current approach is this in the root &lt;code&gt;CMakeLists.txt&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-cmake&quot;&gt;set($ENV{PKG_CONFIG_PATH} &amp;quot;${FFMPEG_DIR}/pkgconfig&amp;quot;)
find_package(PkgConfig REQUIRED)
if(NOT ${PKG_CONFIG_FOUND})
  message(FATAL_ERROR &amp;quot;Missing pkg-config!&amp;quot;)
endif()
pkg_check_modules(CODEC REQUIRED IMPORTED_TARGET libavcodec)
pkg_check_modules(DEVICE REQUIRED IMPORTED_TARGET libavdevice)
pkg_check_modules(FILTER REQUIRED IMPORTED_TARGET libavfilter)
pkg_check_modules(FORMAT REQUIRED IMPORTED_TARGET libavformat)
pkg_check_modules(UTIL REQUIRED IMPORTED_TARGET libavutil)
pkg_check_modules(POSTPROC REQUIRED IMPORTED_TARGET libpostproc)
pkg_check_modules(SWRESAMPLE REQUIRED IMPORTED_TARGET libswresample)
pkg_check_modules(SWSCALE REQUIRED IMPORTED_TARGET libswscale)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, for the executables that need it, they can include the libraries in their subdirectories:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-cmake&quot;&gt;target_link_libraries(myExecutable PRIVATE
  PkgConfig::UTIL
  PkgConfig::SWSCALE
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the face of all this complexity, I have been able to get my software building and learn quite a bit in the process. Greatly simplifying, the basic setup of a program using libav boils down to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Provide hints about what you want to encode or decode&lt;/li&gt;
&lt;li&gt;Open the input or output device in the &lt;code&gt;InputContext&lt;/code&gt; or &lt;code&gt;OutputContext&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Find the stream you want matching the format you want&lt;/li&gt;
&lt;li&gt;Allocate a &lt;code&gt;CodecContext&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Copy the codec parameters to the context (the parameters from
your discovered stream)&lt;/li&gt;
&lt;li&gt;Load the decoder you want&lt;/li&gt;
&lt;li&gt;Start reading/writing data&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If I were to write out a complete example, it would probably end up being in the ballpark of 500-1000 lines, so I&#39;ll abbreviate. A few relevant calls for this are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;av_dict_set&lt;/code&gt;; &lt;code&gt;av_find_*_format&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;avformat_open_input&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;avformat_find_stream_info&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;avcodec_alloc_context&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;avcodec_parameters_to_context&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;av_find_encoder&lt;/code&gt;/&lt;code&gt;av_find_decoder&lt;/code&gt;; &lt;code&gt;avcodec_open2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;av_read_frame&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Anyways, what I&#39;m trying to say is that using FFMPEG is a laborious process. I find that using it is comparable to how Gentoo describes configuring a kernel:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Manually configuring a kernel is often seen as the most difficult procedure a Linux user ever has to perform. Nothing is less true -- after configuring a couple of kernels you don&#39;t even remember that it was difficult ;) &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://krashanoff.com/2022/06/30/libav-is-complicated/#fn3&quot; id=&quot;fnref3&quot;&gt;[3]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr class=&quot;footnotes-sep&quot; /&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;And what a mess it is!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://video.stackexchange.com/questions/15346/libav-x264-failed-to-compile-with-hi422p-profile-and-mp4-container-support#comment20623_15346&quot;&gt;https://video.stackexchange.com/questions/15346/libav-x264-failed-to-compile-with-hi422p-profile-and-mp4-container-support#comment20623_15346&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/25716829/using-ffmpeg-and-libav&quot;&gt;https://stackoverflow.com/questions/25716829/using-ffmpeg-and-libav&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
 &lt;a href=&quot;https://krashanoff.com/2022/06/30/libav-is-complicated/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/li&gt;
&lt;li id=&quot;fn2&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://ffmpeg.org/doxygen/trunk/structAVChannelLayout.html&quot;&gt;https://ffmpeg.org/doxygen/trunk/structAVChannelLayout.html&lt;/a&gt; &lt;a href=&quot;https://krashanoff.com/2022/06/30/libav-is-complicated/#fnref2&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn3&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Kernel&quot;&gt;https://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Kernel&lt;/a&gt; &lt;a href=&quot;https://krashanoff.com/2022/06/30/libav-is-complicated/#fnref3&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
  </entry>
  <entry>
    <title>Run-time dynamic linking in Azure Functions</title>
    <link href="https://krashanoff.com/2022/07/19/run-time-dynamic-linking-in-azure-functions/"/>
    <updated>2022-07-19T05:48:00Z</updated>
    <id>https://krashanoff.com/2022/07/19/run-time-dynamic-linking-in-azure-functions/</id>
    <content xml:lang="en" type="html">&lt;p&gt;Linking C++ code to C# code is easily accomplished with a &lt;code&gt;[DllImport]&lt;/code&gt;. Deploying it on an Azure Function is another beast. Through exhaustive trial-and-error, it can be determined the Azure Function VM doesn&#39;t permit run-time dynamic linking, but &lt;em&gt;does&lt;/em&gt; permit execution of pre-compiled binaries. To work around this problem, engineers can incorporate the shared C++ code as a separate executable that is shelled out to. There are build issues introduced in this approach that are unaddressed in this article, but may be addressed in a later entry.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;If you read over the Microsoft article &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-functions/bring-dependency-to-functions?pivots=programming-language-python&quot;&gt;&amp;quot;Bring dependencies or third party library to Azure Functions&amp;quot;&lt;/a&gt;, you might be led to believe that you can bundle dynamic libraries like Opus or maybe even libav into an &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-functions/functions-overview&quot;&gt;Azure Function app&lt;/a&gt; and load them at run-time.&lt;/p&gt;
&lt;p&gt;I investigated this when attempting to integrate some C# code with a C++ library. There&#39;s no concrete example for including any shared code in a C# function application in this documentation page (likely because all C# code is a DLL at the end of the day anyway). In theory, it should be as easy as including the library code and associated bindings in the uploaded bundle.&lt;/p&gt;
&lt;h2 id=&quot;background&quot; tabindex=&quot;-1&quot;&gt;Background&lt;/h2&gt;
&lt;p&gt;Let&#39;s write a very simple shared library to bundle into a C# application.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;#include &amp;lt;string&amp;gt;
using std::string;

extern &amp;quot;C&amp;quot; {
bool test(const char *i) {
    string a(i);
    return a.size() == 0 || a.back() == &#39;a&#39;;
}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, we have a simple C++ FFI library that could be compiled to a shared object with &lt;code&gt;g++ -shared -o libtest.so test.cpp&lt;/code&gt;. The typical way of including this functionality in a C# program would be to use C#&#39;s &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.dllimportattribute?view=net-6.0&quot;&gt;&lt;code&gt;DllImport&lt;/code&gt;&lt;/a&gt; attribute. Here&#39;s an example class binding to the function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-cs&quot;&gt;using System;
using System.Runtime.InteropServices;

public class TestLib {
    [DllImport(&amp;quot;libtest.so&amp;quot;)]
    public unsafe static bool test(IntPtr i);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In production, some additional considerations are warranted:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Set the &lt;code&gt;EntryPoint&lt;/code&gt; property of the &lt;code&gt;DllImport&lt;/code&gt; attribute.&lt;/li&gt;
&lt;li&gt;We could be using a &lt;code&gt;string&lt;/code&gt; instead of an &lt;code&gt;IntPtr&lt;/code&gt; since their representation is - in practical application - the same.&lt;/li&gt;
&lt;li&gt;Wrap the &lt;code&gt;unsafe&lt;/code&gt; functionality in a safe, C#-native function call.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To integrate this into a published package, we could copy the library to the publish directory with an additional &lt;code&gt;ItemGroup&lt;/code&gt; in the &lt;code&gt;.csproj&lt;/code&gt; file for our application or library:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;ItemGroup&amp;gt;
    &amp;lt;None Update=&amp;quot;libtest.so&amp;quot; CopyToOutputDirectory=&amp;quot;Always&amp;quot; /&amp;gt;
&amp;lt;/ItemGroup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is easily incorporated into a Azure class library function by adding a reference in its &lt;code&gt;.csproj&lt;/code&gt;. Running the resulting function app locally with &lt;code&gt;func start&lt;/code&gt; works without issue. I tested this on both my WSL subsystem and my Windows native system.&lt;/p&gt;
&lt;h2 id=&quot;deploying-to-azure-%2B-debugging&quot; tabindex=&quot;-1&quot;&gt;Deploying to Azure + Debugging&lt;/h2&gt;
&lt;p&gt;After deploying a function that utilizes our shared library, though, any request against it will return a 501.&lt;/p&gt;
&lt;p&gt;The Azure Function app runtime is a bit of a black box. There isn&#39;t much documentation about what file system operations are permitted, what container capabilities are missing or forbidden, or exactly how it launches your code.&lt;/p&gt;
&lt;p&gt;With some early function returns and a lot of patience, I confirmed that the function runs fine until the library tries to load. With additional response-based testing on a live runtime, I was able to determine that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The shared library still exists on the runtime&#39;s disk.&lt;/li&gt;
&lt;li&gt;The library can have its permissions changed, even through calls to &lt;code&gt;chmod&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Any attempt to call code using it will immediately halt the function, returning a 501. Any code running before the call works fine. That is, the library is dynamically linked at run-time.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hang on... The library can be &lt;code&gt;chmod&lt;/code&gt;&#39;d... How did I &lt;code&gt;chmod&lt;/code&gt; the library in my code? &lt;strong&gt;I shelled out.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Following this train of thought, I tried spawning an instance of &lt;code&gt;echo&lt;/code&gt; in a function app on the Linux runtime and sending an HTTP response with its output, and it operated as expected. So if shelling out works, then the &amp;quot;dependencies&amp;quot; part of the documentation was right, but I can&#39;t seem to get the &amp;quot;library&amp;quot; part to work! Was I led astray?&lt;/p&gt;
&lt;p&gt;Maybe, but it&#39;s more likely that I made an incorrect inference. The documentation never once mentioned anything about libraries save for the introduction. The only examples given used a statically-linked &lt;code&gt;ffmpeg&lt;/code&gt;. They may have aluded to being able to include shared libraries, but they never explicitly stated it. They &lt;em&gt;especially&lt;/em&gt; didn&#39;t state it in C# - there wasn&#39;t even an example.&lt;/p&gt;
&lt;h2 id=&quot;the-solution&quot; tabindex=&quot;-1&quot;&gt;The Solution&lt;/h2&gt;
&lt;p&gt;Instead of providing C# bindings to the C++ library, I made the library&#39;s functionality accessible through a statically-linked CLI application. This was then exposed to the main application using a C# wrapper around &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.process?view=net-6.0&quot;&gt;&lt;code&gt;System.Diagnostics.Process&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Lo and behold, it worked without a hitch. The hard part was combining the C++ and C# build systems into a coherent, one-line command. I may write about this more at a later date, but I did so with PowerShell.&lt;/p&gt;
&lt;h2 id=&quot;takeaways&quot; tabindex=&quot;-1&quot;&gt;Takeaways&lt;/h2&gt;
&lt;p&gt;The Azure Function app runtime cannot load non-C# shared libraries, but it &lt;em&gt;can&lt;/em&gt; shell out to statically-linked executables. This holds despite Azure&#39;s documentation and local development tools suggesting otherwise. If you absolutely need to integrate shared code to an Azure Function app, make a simple CLI for the subset of functionality your app requires.&lt;/p&gt;
&lt;p&gt;Load-time dynamic linking is likely disabled for security reasons. Maybe it&#39;s on me for failing to research enough, but I couldn&#39;t find any other documentation on how the Azure runtime handles shared libraries for the life of me, and ended up sinking way too much time into debugging. Hopefully this knowledge will help others.&lt;/p&gt;
&lt;h2 id=&quot;other-reading&quot; tabindex=&quot;-1&quot;&gt;Other Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://mark-borg.github.io/blog/2017/interop/&quot;&gt;https://mark-borg.github.io/blog/2017/interop/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/cpp/dotnet/dotnet-programming-with-cpp-cli-visual-cpp&quot;&gt;https://docs.microsoft.com/en-us/cpp/dotnet/dotnet-programming-with-cpp-cli-visual-cpp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Unresponsive web design</title>
    <link href="https://krashanoff.com/2022/08/20/unresponsive-web-design/"/>
    <updated>2022-08-20T06:00:00Z</updated>
    <id>https://krashanoff.com/2022/08/20/unresponsive-web-design/</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;em&gt;Responsive web design is good, but if you need to use HTML/CSS to format a document for print, the funky real-life units come in handy.&lt;/em&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;I used a Google Doc to create my resume for quite some time. It was the basic two-column template that shows up on the homepage.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://krashanoff.com/static/img/resume/gdoc.png&quot; alt=&quot;google docs default resume template&quot; /&gt;&lt;/p&gt;
&lt;p&gt;I also tried using LaTeX to format my resume. There&#39;s a slew of templates online. You can imagine how that one went:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://krashanoff.com/static/img/resume/latex.png&quot; alt=&quot;latex template&quot; /&gt;&lt;/p&gt;
&lt;p&gt;But there&#39;s all sorts of specific units in CSS. There&#39;s &lt;code&gt;em&lt;/code&gt;, &lt;code&gt;px&lt;/code&gt;, &lt;code&gt;vw&lt;/code&gt;, &lt;code&gt;vh&lt;/code&gt;, ... There&#39;s also &lt;code&gt;pt&lt;/code&gt;, &lt;code&gt;in&lt;/code&gt;, or &lt;code&gt;cm&lt;/code&gt;. Imagine that: &lt;em&gt;inches&lt;/em&gt; in &lt;strong&gt;web design&lt;/strong&gt;! That would absolutely butcher the webpage between viewports. What about vertical monitors? I don&#39;t even want to think about cell phones. Responsive design is the name of the game in the era of flexbox and SPAs. There is no place for &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;s for formatting or inches as a unit of measure. Not in the HTML/CSS era I grew up in.&lt;/p&gt;
&lt;p&gt;You know what those units are great for? &lt;strong&gt;Text documents.&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;body {
  width: 8.5in;
  height: 11in;
  font-size: 12pt;
  margin: 0.5in;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Your webpage is now U.S. letter stock in 12pt font with a half-inch margin. But I&#39;ll do you one better. We can limit the amount of content printed to the page with an &lt;code&gt;@media&lt;/code&gt; query&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://krashanoff.com/2022/08/20/unresponsive-web-design/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;@media print
{
  .noprint {
    display: none !important;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This lets us control what actually shows up in the printed copy. I ended up using these techniques to make my &lt;a href=&quot;https://krashanoff.com/resume&quot;&gt;current resume&lt;/a&gt;.&lt;/p&gt;
&lt;hr class=&quot;footnotes-sep&quot; /&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;I saw this on StackOverflow originally, but I can&#39;t find the source anymore. There&#39;s plenty of spots, though. &lt;a href=&quot;https://www.geeksforgeeks.org/how-to-hide-an-element-when-printing-a-web-page-using-css/&quot;&gt;https://www.geeksforgeeks.org/how-to-hide-an-element-when-printing-a-web-page-using-css/&lt;/a&gt; &lt;a href=&quot;https://krashanoff.com/2022/08/20/unresponsive-web-design/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
  </entry>
  <entry>
    <title>WSL and ZScaler</title>
    <link href="https://krashanoff.com/2022/09/08/wsl-and-zscaler/"/>
    <updated>2022-09-08T06:00:00Z</updated>
    <id>https://krashanoff.com/2022/09/08/wsl-and-zscaler/</id>
    <content xml:lang="en" type="html">&lt;p&gt;WSL2 uses a real Linux kernel, but its networking is proxied through the host system. For corporate laptops using ZScaler, there is a root CA certificate installed to the machine to allow sniffing of TLS/SSL traffic as it travels through the intranet. This poses a problem for virtualized hosts. If you try to &lt;code&gt;curl&lt;/code&gt; an HTTPS address on your WSL virtual machine, for example, the program will complain of an invalid certificate. We subvert this by copying the root certificate to our virtual machine.&lt;/p&gt;
&lt;p&gt;Assuming that your host machine has WSL2 installed and configured, the setup process is as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open the Windows certificate manager and navigate to your &amp;quot;Trusted Root Certification Authorities&amp;quot;.&lt;/li&gt;
&lt;li&gt;In the &amp;quot;Certificates&amp;quot; section, you can locate your ZScaler Root CA.&lt;/li&gt;
&lt;li&gt;Right-clicking this certificate can export your certificate as a DER (or similar).&lt;/li&gt;
&lt;li&gt;Convert this certificate using &lt;code&gt;openssl&lt;/code&gt;: &lt;code&gt;openssl x509 -inform DER -in /path/to/your/cert -out /usr/local/share/ca-certificates/zscaler.crt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Finally, update the VM&#39;s CA certificate database: &lt;code&gt;update-ca-certificates&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You should get some output about how your new list of credentials has &lt;em&gt;one more&lt;/em&gt; than the old version. If you added some other certificates between updates, this number may be higher.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Sidebar: some web browsers are pretty firm about their certificate stores. &lt;a href=&quot;https://www.waterfox.net/&quot;&gt;Waterfox&lt;/a&gt; is one of them. Trying to browse to a known website using Waterfox on a ZScaler-enabled laptop will give you a TLS error.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>CS101: Time Complexity</title>
    <link href="https://krashanoff.com/2022/09/15/cs101-time-complexity/"/>
    <updated>2022-09-15T08:00:00Z</updated>
    <id>https://krashanoff.com/2022/09/15/cs101-time-complexity/</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;em&gt;This post was originally written and posted to a Discord server shared by my friends and I on September 1st, 2022. I made minor edits between then and the current post.&lt;/em&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Time complexity is the fundamental metric in computer science used to describe the runtime of an algorithm. If an algorithm for a given task has a lower time complexity than another for the same task, then it is provably faster for all possible inputs. The basis for time complexity lay in the growth rate of the function describing the exact runtime of the algorithm in question.&lt;/p&gt;
&lt;p&gt;Given:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An array of numbers, &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;A&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.68333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.68333em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;. For example, &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mo&gt;[&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo separator=&quot;true&quot;&gt;,&lt;/mo&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;mo separator=&quot;true&quot;&gt;,&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mo&gt;]&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;A = [ 1, 3, 2 ]&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.75em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:1em;vertical-align:-0.25em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mord mathrm&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;mpunct&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mord mathrm&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;mpunct&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mord mathrm&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;An empty array, &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;R&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.68333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.68333em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot; style=&quot;margin-right:0.00773em;&quot;&gt;R&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We could write an algorithm to sort the array &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;A&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.68333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.68333em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; in order of least to greatest.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;R = an empty array

while A is not empty:
	MINIMUM = first element of A
	for each number, N, in A:
		if N &amp;lt; MINIMUM then let MINIMUM = N
		otherwise, do nothing

	insert MINIMUM at the start of R
	remove MINIMUM from A
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;How much time does it take for this algorithm to execute?&lt;/strong&gt; Let&#39;s say it takes one second (&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathrm&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;) to check an element, and &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi mathvariant=&quot;normal&quot;&gt;∣&lt;/mi&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mi mathvariant=&quot;normal&quot;&gt;∣&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;|A|&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.75em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:1em;vertical-align:-0.25em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathrm&quot;&gt;∣&lt;/span&gt;&lt;span class=&quot;mord mathit&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;mord mathrm&quot;&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, the length of our input array, is &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.43056em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.43056em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;To fill up &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;R&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.68333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.68333em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot; style=&quot;margin-right:0.00773em;&quot;&gt;R&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, we have to find every minimum element of &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;A&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.68333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.68333em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;. We have to check all &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.43056em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.43056em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; items of &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;A&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.68333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.68333em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; to find the first minimum (all items), then &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;n-1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.72777em;vertical-align:-0.08333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;−&lt;/span&gt;&lt;span class=&quot;mord mathrm&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; elements (we already found a minimum), then &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;n-2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.72777em;vertical-align:-0.08333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;−&lt;/span&gt;&lt;span class=&quot;mord mathrm&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; (we found another), ... and so on. So it takes &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;∗&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;n * 1 = n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.64444em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.64444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;∗&lt;/span&gt;&lt;span class=&quot;mord mathrm&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mord mathit&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; time to find a minimum in the worst case scenario.&lt;/p&gt;
&lt;p&gt;In the absolute worst case scenario, the array &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;A&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.68333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.68333em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; is in reverse order. In this situation, we have to check the entire array to find every &amp;quot;next minimum&amp;quot; element to insert into &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;R&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.68333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.68333em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot; style=&quot;margin-right:0.00773em;&quot;&gt;R&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;. Since we need to locate &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.43056em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.43056em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; elements to fill &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;R&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.68333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.68333em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot; style=&quot;margin-right:0.00773em;&quot;&gt;R&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, and we have to check at most &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.43056em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.43056em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; items to get each of those, we say this takes &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo&gt;(&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;mo&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;O(n^2)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.8141079999999999em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:1.064108em;vertical-align:-0.25em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot; style=&quot;margin-right:0.02778em;&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span style=&quot;top:-0.363em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;reset-textstyle scriptstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathrm&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;baseline-fix&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; operations, which means &lt;strong&gt;the algorithm&#39;s runtime is always less than some constant multiple of &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;n^2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.8141079999999999em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.8141079999999999em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span style=&quot;top:-0.363em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;reset-textstyle scriptstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathrm&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;baseline-fix&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;. For example, &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;msup&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;2n^2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.8141079999999999em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.8141079999999999em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathrm&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span style=&quot;top:-0.363em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;reset-textstyle scriptstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathrm&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;baseline-fix&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; or &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;msup&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;10n^2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.8141079999999999em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.8141079999999999em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathrm&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;mord mathrm&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span style=&quot;top:-0.363em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;reset-textstyle scriptstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathrm&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;baseline-fix&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; are all multiples of &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;n^2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.8141079999999999em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.8141079999999999em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span style=&quot;top:-0.363em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;reset-textstyle scriptstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathrm&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;baseline-fix&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, but since there exists some integer greater than their current multiple, they are all &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo&gt;(&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;mo&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;O(n^2)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.8141079999999999em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:1.064108em;vertical-align:-0.25em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot; style=&quot;margin-right:0.02778em;&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span style=&quot;top:-0.363em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;reset-textstyle scriptstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathrm&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;baseline-fix&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Intuitively, this might not make sense. &amp;quot;Well couldn&#39;t you just say &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;O(n)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.75em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:1em;vertical-align:-0.25em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot; style=&quot;margin-right:0.02778em;&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord mathit&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; is &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.43056em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.43056em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; times a billion?&amp;quot; Yes, you could, but if your algorithm takes &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;n^2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.8141079999999999em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.8141079999999999em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span style=&quot;top:-0.363em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;reset-textstyle scriptstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathrm&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;baseline-fix&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; steps in the worst case scenario, then &lt;strong&gt;for some value of &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.43056em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.43056em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, it will pass &amp;quot;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.43056em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.43056em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; times a billion&amp;quot;&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://krashanoff.com/static/img/cs101/time-complexity/aha.png&quot; alt=&quot;the function n squared is much lower than n times a billion initially&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&amp;quot;Aha! I got you. See, &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.43056em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.43056em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; times a billion is higher than your &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;n^2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.8141079999999999em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.8141079999999999em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span style=&quot;top:-0.363em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;reset-textstyle scriptstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathrm&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;baseline-fix&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;!&amp;quot; Not so fast. What if we scale to, say, &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;msup&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mrow&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mn&gt;8&lt;/mn&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;10^{18}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.8141079999999999em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.8141079999999999em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathrm&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathrm&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span style=&quot;top:-0.363em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;reset-textstyle scriptstyle uncramped&quot;&gt;&lt;span class=&quot;mord scriptstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathrm&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;mord mathrm&quot;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;baseline-fix&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;?&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://krashanoff.com/static/img/cs101/time-complexity/gotcha.png&quot; alt=&quot;the function n squared passes n times a billion&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Since the function &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;n^2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.8141079999999999em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.8141079999999999em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span style=&quot;top:-0.363em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;reset-textstyle scriptstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathrm&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;baseline-fix&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;em&gt;grows&lt;/em&gt; faster than &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.43056em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.43056em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, there is a point where the algorithm could hypothetically take longer than &amp;quot;a billion times &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.43056em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.43056em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; steps&amp;quot;. Since the upper bound is all that really matters here, programmers use this to denote the &lt;strong&gt;upper bound of an algorithm&#39;s runtime. We call this &amp;quot;time complexity&amp;quot;.&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;appendix&quot; tabindex=&quot;-1&quot;&gt;Appendix&lt;/h2&gt;
&lt;h2 id=&quot;unverified-python&quot; tabindex=&quot;-1&quot;&gt;Unverified Python&lt;/h2&gt;
&lt;p&gt;Here&#39;s the algorithm mentioned above in Python. No guarantees of correctness, lol.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;A = [1, 3, 2]
R = []

while A:
	minimum = A[0]
	for N in A:
		minimum = min(minimum, N)
	R.append(minimum)
	A.remove(minimum)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Some considerations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There is already a more efficient sorting algorithm implemented in Python, callable with &lt;code&gt;sort()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;This removes elements from the list &lt;code&gt;A&lt;/code&gt;. If you wish to retain elements, a copy would need to be made.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;loosey-goosey-proof-of-correctness&quot; tabindex=&quot;-1&quot;&gt;Loosey-Goosey Proof of Correctness&lt;/h3&gt;
&lt;p&gt;Prove: Given an arbitrary array of numbers &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;A&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.68333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.68333em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, the algorithm &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;B&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.68333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.68333em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot; style=&quot;margin-right:0.05017em;&quot;&gt;B&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; produces an array &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;R&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.68333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.68333em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot; style=&quot;margin-right:0.00773em;&quot;&gt;R&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; of numbers meeting the partial order &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;≤&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\leq&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.63597em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.7719400000000001em;vertical-align:-0.13597em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mrel&quot;&gt;≤&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;That the loop terminates is trivial. For each iteration of array &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;A&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.68333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.68333em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, at least one element is removed. Since the outermost loop terminates when &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi mathvariant=&quot;normal&quot;&gt;∣&lt;/mi&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mi mathvariant=&quot;normal&quot;&gt;∣&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;|A| = 0&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.75em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:1em;vertical-align:-0.25em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathrm&quot;&gt;∣&lt;/span&gt;&lt;span class=&quot;mord mathit&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;mord mathrm&quot;&gt;∣&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mord mathrm&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; , the loop will terminate after &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi mathvariant=&quot;normal&quot;&gt;∣&lt;/mi&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mi mathvariant=&quot;normal&quot;&gt;∣&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;|A|&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.75em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:1em;vertical-align:-0.25em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathrm&quot;&gt;∣&lt;/span&gt;&lt;span class=&quot;mord mathit&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;mord mathrm&quot;&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; iterations.&lt;/li&gt;
&lt;li&gt;That the algorithm is correct for iteration &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;i =0&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.65952em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.65952em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mord mathrm&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; is also trivial. The sorted order of the first zero elements of &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;A&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.68333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.68333em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; is the empty set, &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi mathvariant=&quot;normal&quot;&gt;∅&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\emptyset&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.75em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.80556em;vertical-align:-0.05556em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathrm&quot;&gt;∅&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Take some iteration &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;i&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.65952em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.65952em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;. Assume &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;R_i&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.68333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.83333em;vertical-align:-0.15em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathit&quot; style=&quot;margin-right:0.00773em;&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span style=&quot;top:0.15em;margin-right:0.05em;margin-left:-0.00773em;&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;reset-textstyle scriptstyle cramped&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;baseline-fix&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; to be the first &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;i&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.65952em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.65952em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; sorted elements of &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;A&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.68333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.68333em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, and &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;A_i&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.68333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.83333em;vertical-align:-0.15em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span style=&quot;top:0.15em;margin-right:0.05em;margin-left:0em;&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;reset-textstyle scriptstyle cramped&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;baseline-fix&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, the value of &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;A&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.68333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.68333em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; at iteration &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;i&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.65952em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.65952em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, to be equal to &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mo&gt;∖&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;A \setminus R_i&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.75em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:1em;vertical-align:-0.25em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;∖&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathit&quot; style=&quot;margin-right:0.00773em;&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span style=&quot;top:0.15em;margin-right:0.05em;margin-left:-0.00773em;&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;reset-textstyle scriptstyle cramped&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;baseline-fix&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;.
&lt;ol&gt;
&lt;li&gt;The innermost loop finds the minimum element of &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;A_i&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.68333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.83333em;vertical-align:-0.15em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span style=&quot;top:0.15em;margin-right:0.05em;margin-left:0em;&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;reset-textstyle scriptstyle cramped&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;baseline-fix&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, and removes it from &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;A_i&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.68333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.83333em;vertical-align:-0.15em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span style=&quot;top:0.15em;margin-right:0.05em;margin-left:0em;&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;reset-textstyle scriptstyle cramped&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;baseline-fix&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; to produce &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;A_{i+1}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.68333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.891661em;vertical-align:-0.208331em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span style=&quot;top:0.15em;margin-right:0.05em;margin-left:0em;&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;reset-textstyle scriptstyle cramped&quot;&gt;&lt;span class=&quot;mord scriptstyle cramped&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mord mathrm&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;baseline-fix&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;R_{i+1}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.68333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.891661em;vertical-align:-0.208331em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathit&quot; style=&quot;margin-right:0.00773em;&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span style=&quot;top:0.15em;margin-right:0.05em;margin-left:-0.00773em;&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;reset-textstyle scriptstyle cramped&quot;&gt;&lt;span class=&quot;mord scriptstyle cramped&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mord mathrm&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;baseline-fix&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; is now equal to the sorted version of the first &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;i+1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.65952em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.74285em;vertical-align:-0.08333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mord mathrm&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; sorted elements of &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;A&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.68333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.68333em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css&quot; /&gt;
</content>
  </entry>
  <entry>
    <title>Gentoo is a project car</title>
    <link href="https://krashanoff.com/2022/10/18/gentoo-is-a-project-car/"/>
    <updated>2022-10-18T07:00:00Z</updated>
    <id>https://krashanoff.com/2022/10/18/gentoo-is-a-project-car/</id>
    <content xml:lang="en" type="html">&lt;p&gt;Gentoo, Gentoo. Ah yes, Gentoo. Gentoo is my favorite Linux &amp;quot;distribution&amp;quot;. I&#39;ve mentioned it before!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Manually configuring a kernel is often seen as the most difficult procedure a Linux user ever has to perform. Nothing is less true -- after configuring a couple of kernels you don&#39;t even remember that it was difficult ;) &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://krashanoff.com/2022/10/18/gentoo-is-a-project-car/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;...consider Gentoo&#39;s behemoth &lt;a href=&quot;https://wiki.gentoo.org/wiki/Portage&quot;&gt;&lt;code&gt;portage(5)&lt;/code&gt;&lt;/a&gt;.&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://krashanoff.com/2022/10/18/gentoo-is-a-project-car/#fn2&quot; id=&quot;fnref2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That last one is a little underhanded. Not for calling &lt;code&gt;portage&lt;/code&gt; &amp;quot;behemoth&amp;quot; -- I think that anybody who has used Gentoo knows exactly what I&#39;m talking about.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ man portage
PORTAGE(5)                          Portage                         PORTAGE(5)

NAME
       portage - the heart of Gentoo

DESCRIPTION
       The  current portage code uses many different configuration files, most
       of which are unknown to users and normal developers.  Here we will  try
       to  collect  all the odds and ends so as to help users more effectively
       utilize portage.  This is a reference only for files which do  not  al‐
       ready have a man page.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;No, you see, for Gentoo, they &lt;strong&gt;need&lt;/strong&gt; a behemoth like &lt;code&gt;portage&lt;/code&gt;, because Gentoo is hardly a distribution at all. It&#39;s more like a collection of tools that people can use to help ease the headache that would be maintaining their own Linux From Scratch (LFS) installation.&lt;/p&gt;
&lt;p&gt;The biggest selling point is its toolchain for compiling everything in your system from source, with all the relevant configuration options you might have in mind. You can build all your applications without the dependencies for functionality that you don&#39;t need. Better yet, you can build your applications without that functionality altogether! For me, a nice one here is compiling GNOME keyring&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://krashanoff.com/2022/10/18/gentoo-is-a-project-car/#fn3&quot; id=&quot;fnref3&quot;&gt;[3]&lt;/a&gt;&lt;/sup&gt; without any of the GUI components on my server. Its dependency on &lt;a href=&quot;https://packages.gentoo.org/packages/app-crypt/pinentry&quot;&gt;pinentry&lt;/a&gt; is obliterated, and so is the seemingly endless list of Qt5 codependencies.&lt;/p&gt;
&lt;p&gt;Another big one is that changes to configuration files between versions are actually obvious and handled well. I find that when I use a Ubuntu-like distribution, it&#39;s a serious mess trying to figure out what changes with each upgrade; and especially difficult to find out what is new in my &lt;strong&gt;configuration file&lt;/strong&gt;. With Gentoo it&#39;s just a matter of running &lt;a href=&quot;https://wiki.gentoo.org/wiki/Handbook:X86/Portage/Tools#dispatch-conf&quot;&gt;&lt;code&gt;dispatch-conf&lt;/code&gt;&lt;/a&gt; and paging through the changes.&lt;/p&gt;
&lt;p&gt;It&#39;s also good if you&#39;re concerned about the freedom of software. You can specify which packages are available to you &lt;a href=&quot;https://wiki.gentoo.org/wiki/License_groups&quot;&gt;by which license they use&lt;/a&gt;. Don&#39;t want &lt;a href=&quot;https://www.gnu.org/software/libc/&quot;&gt;GNU&lt;/a&gt;/Linux? Then just compile all your software with &lt;a href=&quot;https://musl.libc.org/&quot;&gt;musl&lt;/a&gt;!&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://krashanoff.com/2022/10/18/gentoo-is-a-project-car/#fn4&quot; id=&quot;fnref4&quot;&gt;[4]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Using open-source to build your system leads to some really neat paradigms that you don&#39;t see in other distributions. The great one is that your whole system is viewed as a source tree, hence the semantics of the command &lt;code&gt;emerge&lt;/code&gt;. It makes things fairly reproducible so long as you version your config files.&lt;/p&gt;
&lt;p&gt;There are many things about this approach that irk people, though. For the true Gentoo experience, you compile everything from source. &lt;u&gt;Everything.&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;An &lt;em&gt;actual, official part of the installation process&lt;/em&gt; that the manual really likes to encourage is compiling a custom Linux kernel for your system. Think about it: you can create your perfect, purpose-built system! Its kernel is designed with you in mind, because you are the one who configured it! Think of the possibilities!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/documentation/ios-ipados-release-notes/ios-16_1-release-notes&quot;&gt;Zero memory on-free like iOS does now&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Poison the stack returning from a kernel call (every time)&lt;/li&gt;
&lt;li&gt;Remove support for filesystems that you don&#39;t care about&lt;/li&gt;
&lt;li&gt;Make functionality that you personally deem non-essential into a module&lt;/li&gt;
&lt;li&gt;Remove support for emulating 32-bit binaries... Maybe you have a special reason.&lt;/li&gt;
&lt;li&gt;Round-robin scheduling for processes...?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For most desktop users, that last one is just comedy. There is something to be said, though: installing Gentoo and configuring a kernel was the first real exposure I had to the different scheduling algorithms and memory fragmentation mitigation techniques I was learning in university. You really can use round-robin scheduling if you build the kernel yourself. Whether that&#39;s a good idea is up to you.&lt;/p&gt;
&lt;p&gt;But let&#39;s take a step back and enjoy a cool, refreshing glass of &lt;strong&gt;perspective&lt;/strong&gt;. Should we really be having people configure their own kernels?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;No. We really shouldn&#39;t, in my opinion. Maybe not even developers.&lt;/strong&gt; I view kernel configuration in the same way that I view hand-rolling cryptography: it&#39;s something that really only a qualified expert should be doing. There&#39;s so many ways that you can absolutely botch your system by configuring something in your kernel wrong. I did so in my first Gentoo installation many, many years ago trying to set up Docker. A few wrong configuration options and suddenly my system is running significantly slower than it did post-install. Networking, especially, was behaving strangely. I hadn&#39;t kept any notes and, consequently, had no luck retracing my steps. I&#39;m willing to bet the average amateur OS enthusiast distro-hopping left and right would make the same mistakes.&lt;/p&gt;
&lt;p&gt;There&#39;s a few small parts that are fine to tweak, like the ones I mentioned above (zero-on-free, less filesystems, more modules, etc.), but past those is nothing but suffering. Configuring a kernel to support virtualization is a minefield. Even setting up something like &lt;a href=&quot;https://wiki.gentoo.org/wiki/Iptables#Kernel&quot;&gt;&lt;code&gt;iptables&lt;/code&gt;&lt;/a&gt; can be a pain to get right.&lt;/p&gt;
&lt;p&gt;Even the argument that compiling all your software yourself will significantly improve performance might be misguided. Removing support for certain big features like Xorg might improve performance on a server that I only want to use for a few applications, but for the average enthusiast desktop user with their Xorg and their BSPWM or Dunst, I don&#39;t anticipate much improvement over the same DE on Arch or Artix.&lt;/p&gt;
&lt;p&gt;Where the most improvement might be seen in that case is in really complicated software -- something like a web browser, but then you start running into compilation time issues. Even if your hardware is high-end, compiling Firefox from source is so notoriously laborious that Gentoo had to add a &lt;a href=&quot;https://packages.gentoo.org/packages/www-client/firefox-bin&quot;&gt;binary package&lt;/a&gt;. I tried compiling it once on my i7-4770K desktop, and a few &lt;strong&gt;hours&lt;/strong&gt;&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://krashanoff.com/2022/10/18/gentoo-is-a-project-car/#fn5&quot; id=&quot;fnref5&quot;&gt;[5]&lt;/a&gt;&lt;/sup&gt; into it I decided to bite the bullet and download the binary.&lt;/p&gt;
&lt;p&gt;But, this might be getting off track. I like Gentoo. No -- I &lt;strong&gt;LOVE&lt;/strong&gt; Gentoo. Seriously.&lt;/p&gt;
&lt;p&gt;It&#39;s absolutely a contradiction. Even with all the time it takes to install. Even with the inevitable problems you&#39;ll encounter when upgrading. For all the compilation time for relatively minimal gain. There&#39;s not too great an argument for why people use it. It&#39;s flashy and brutish; it&#39;s impractical; it&#39;s trading on the margin for pennies; it&#39;s just shy of unusable for anyone else and if you change one environment variable it might all crumble to pieces. You know what that sounds like to me? &lt;strong&gt;A project car.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;People love project cars! They tinker with them to learn, lovingly fix them when they&#39;re broken, and they drive them because it&#39;s &lt;em&gt;fun&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;If there is such a thing as the &amp;quot;Murciélago of Linux&amp;quot;, then Gentoo is like the Datsun 500 you&#39;ve had sitting in your garage for the last 10 years. Absolutely impractical for the average user, more maintainable than a high-end sports car, but still just as fun.&lt;/p&gt;
&lt;p&gt;Looking at it this way, it becomes less about performance and &amp;quot;cool points&amp;quot; and becomes much more focused on enjoyment of the user.&lt;/p&gt;
&lt;p&gt;For enthusiasts with enough wherewithall, I don&#39;t think it&#39;s a bad hobby to manage your system at the level Gentoo demands. If anything, it&#39;s educative. Years ago when I absolutely butchered my daily driver&#39;s network connectivity by messing up my kernel when installing Docker, I was frustrated, but I had fun figuring out what went wrong with minimal information to go off of. That&#39;s a skill that ended up serving me well after graduating.&lt;/p&gt;
&lt;p&gt;For an uninitiated user just looking for a cool system, though, the Gentoo manual can be like a guide to Frankenstein&#39;s monster. &lt;strong&gt;If you didn&#39;t understand the risks going into it, you&#39;ll sure as hell understand them coming out of it.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;But it&#39;s ultimately your project. You don&#39;t need to justify why you&#39;re doing it.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;...and, there&#39;s certainly a case to be made for checking your system &lt;code&gt;htop&lt;/code&gt; output to see a comically low number of tasks at idle.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://krashanoff.com/static/img/gentoo/htop.png&quot; alt=&quot;17 threads at idle&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I&#39;m just going to say it - I get excited when my system breaks.&lt;/p&gt;
&lt;p&gt;Oh? What&#39;s that? The sweet siren&#39;s call beckons me once again? What amusements await us this time? Unsatisfied dependencies? Slot conflicts? Perhaps, I daresay, a circular dependency or two? Nothing gives me a jolt like watching portage spew forth a slew of errors in beautiful 256, knowing that my baby needs me. Pop the hood, interlock fingers &amp;amp;&amp;amp; flex, and get to work. The satisfaction after resolving blocked updates and seeing the packages that were previously taunting you getting emerged is comparable only to the most worldly and carnal pleasures. When I see that there is a new news item, there&#39;s a decent chance that I may literally scream with excitement. I woke up in a hospital after receiving word of the 17.0 -&amp;gt; 17.1 profile upgrade. They had to sedate me because of the blind rage I flew into knowing that my system was unattended, rotting away on the ancient and deprecated 17.0 profile. Nobody knows your system like you, and the bond that I&#39;ve developed with my distro over the years is irreplaceable. I&#39;ll never go back.&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://krashanoff.com/2022/10/18/gentoo-is-a-project-car/#fn6&quot; id=&quot;fnref6&quot;&gt;[6]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr class=&quot;footnotes-sep&quot; /&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://krashanoff.com/2022/06/30/libav-is-complicated/&quot;&gt;https://krashanoff.com/2022/06/30/libav-is-complicated/&lt;/a&gt; &lt;a href=&quot;https://krashanoff.com/2022/10/18/gentoo-is-a-project-car/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn2&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://krashanoff.com/2021/09/24/exploring-openbsd/&quot;&gt;https://krashanoff.com/2021/09/24/exploring-openbsd/&lt;/a&gt; &lt;a href=&quot;https://krashanoff.com/2022/10/18/gentoo-is-a-project-car/#fnref2&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn3&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;And I&#39;m &lt;strong&gt;glad&lt;/strong&gt; they killed it in RHEL 8! Ding dong the witch is dead. &lt;a href=&quot;https://access.redhat.com/solutions/4491691&quot;&gt;https://access.redhat.com/solutions/4491691&lt;/a&gt; &lt;a href=&quot;https://krashanoff.com/2022/10/18/gentoo-is-a-project-car/#fnref3&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn4&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://www.reddit.com/r/copypasta/comments/gs715n/i_use_linux_as_my_operating_system/&quot;&gt;https://www.reddit.com/r/copypasta/comments/gs715n/i_use_linux_as_my_operating_system/&lt;/a&gt; &lt;a href=&quot;https://krashanoff.com/2022/10/18/gentoo-is-a-project-car/#fnref4&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn5&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;Yes, hours! I let it run most of the day before giving up. &lt;a href=&quot;https://krashanoff.com/2022/10/18/gentoo-is-a-project-car/#fnref5&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn6&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://www.reddit.com/r/Gentoo/comments/bzyc3f/im_just_going_to_say_it_i_get_excited_when_my/&quot;&gt;https://www.reddit.com/r/Gentoo/comments/bzyc3f/im_just_going_to_say_it_i_get_excited_when_my/&lt;/a&gt; &lt;a href=&quot;https://krashanoff.com/2022/10/18/gentoo-is-a-project-car/#fnref6&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
  </entry>
  <entry>
    <title>Keyword generics seem intimidating</title>
    <link href="https://krashanoff.com/2023/03/14/keyword-generics-seem-intimidating/"/>
    <updated>2023-03-14T00:00:00Z</updated>
    <id>https://krashanoff.com/2023/03/14/keyword-generics-seem-intimidating/</id>
    <content xml:lang="en" type="html">&lt;p&gt;You ever read &lt;a href=&quot;https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/&quot;&gt;&amp;quot;What Color is Your Function&amp;quot;&lt;/a&gt;? A pretty good lot of people have.&lt;/p&gt;
&lt;p&gt;If you&#39;ve worked with &lt;code&gt;async&lt;/code&gt;, you know how infectious function coloring can be. If you want to write some code that can be called asynchronously, then it definitely can&#39;t be called synchronously. Or, if it can be called synchronously, it has to be done using something that feels kind of jank. Like Python:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-py&quot;&gt;import asyncio

async def thing():
  return await some_other_thing()

if __name__ == &#39;__main__&#39;:
  result = asyncio.run(thing)
  print(result)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But most of the time, the async behavior propagates up the call stack, until you have an &lt;code&gt;async&lt;/code&gt; main. Or in Rust, where you have to stand up a whole runtime for it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;fn main() {
  Runtime::new()
    .unwrap()
    .spawn(async {
      println!(&amp;quot;hi&amp;quot;);
    });
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Where function coloring is less of a problem is in langauges like Go, or languages where &lt;code&gt;suspend/resume&lt;/code&gt;
is the way of doing async. In those languages, functions don&#39;t have special keywords to be considered asynchronous,
which means that any function could be instantiated like it were async.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;func longComputation(resultChan chan&amp;lt;-int) {
  resultChan &amp;lt;- 2
}

func main() {
  resultChan := make(chan int)
  go longComputation(resultChan) // runs asynchronously

  // we can do stuff then block on the result later
  fmt.Println(&amp;quot;thing&amp;quot;)
  output := &amp;lt;-resultChan
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rust is a modern language with a huge groundswell of support. The steering committee wants what&#39;s best for its users, so it makes sense that they would benefit from solving this problem sooner than later. The Rust project recently announced that they were planning to tackle this problem through the Keyword Generics Initiative, whose announcement you should read &lt;a href=&quot;https://blog.rust-lang.org/inside-rust/2022/07/27/keyword-generics.html&quot;&gt;here&lt;/a&gt;. Their plan was:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Rust allows you to be generic over types - it does not allow you to be generic over other things that are usually specified by keywords. For example, whether a function is async, whether a function can fail or not, whether a function is const or not, etc.&lt;/p&gt;
&lt;p&gt;The post &amp;quot;What color is your function&amp;quot; describes what happens when a language introduces async functions, but with no way to be generic over them...&lt;/p&gt;
&lt;p&gt;This isn&#39;t just limited to async though, it applies to all modifier keywords - including ones we may define in the future. So we&#39;re looking to fill that gap by exploring something we call &amp;quot;keyword generics&amp;quot;: the ability to be generic over keywords such as const and async.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;-- &amp;quot;Announcing the Keyword Generics Initiative&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The tentatively proposed syntax was:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rs&quot;&gt;async&amp;lt;A&amp;gt; trait Read {
    async&amp;lt;A&amp;gt; fn read(&amp;amp;mut self, buf: &amp;amp;mut [u8]) -&amp;gt; Result&amp;lt;usize&amp;gt;;
    async&amp;lt;A&amp;gt; fn read_to_string(&amp;amp;mut self, buf: &amp;amp;mut String) -&amp;gt; Result&amp;lt;usize&amp;gt; { ... }
}

/// Read from a reader into a string.
async&amp;lt;A&amp;gt; fn read_to_string(reader: &amp;amp;mut impl Read * A) -&amp;gt; std::io::Result&amp;lt;String&amp;gt; {
    let mut string = String::new();
    reader.read_to_string(&amp;amp;mut string).await?;
    string
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To me, this seems unwieldy, but at least comprehensible: we&#39;re generalizing the function over the &lt;code&gt;async&lt;/code&gt; keyword itself, and introducing some strange syntax in order to specify whether a type fulfills that optional &lt;code&gt;async/await&lt;/code&gt;-ness. Just another little nugget of Rust syntax to notch onto the belt.&lt;/p&gt;
&lt;p&gt;But, the working group recently released &lt;a href=&quot;https://blog.rust-lang.org/inside-rust/2023/02/23/keyword-generics-progress-report-feb-2023.html&quot;&gt;a new update on the project&lt;/a&gt;. After nine months, the proposed syntax is a &lt;em&gt;little&lt;/em&gt; different.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rs&quot;&gt;trait ?async Read {
    ?async fn read(&amp;amp;mut self, buf: &amp;amp;mut [u8]) -&amp;gt; Result&amp;lt;usize&amp;gt;;
    ?async fn read_to_string(&amp;amp;mut self, buf: &amp;amp;mut String) -&amp;gt; Result&amp;lt;usize&amp;gt; { ... }
}

/// Read from a reader into a string.
?async fn read_to_string(reader: &amp;amp;mut impl ?async Read) -&amp;gt; std::io::Result&amp;lt;String&amp;gt; {
    let mut string = String::new();
    reader.read_to_string(&amp;amp;mut string).await?;
    Ok(string)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I know this is still relatively early in the lifetime of the project, but I can&#39;t say I&#39;m enthused with this. In fact, this syntax kind of makes me anxious.&lt;/p&gt;
&lt;p&gt;At least in the case of &lt;code&gt;async&amp;lt;A&amp;gt;&lt;/code&gt;, it is pretty apparent that it&#39;s an extension of the generics system in Rust, which is what they were going for in the first place. With this new &lt;code&gt;?async&lt;/code&gt;, though, the feature presents itself syntactically as an extension of the error propoagation system (e.g., &lt;code&gt;result?.do_thing()&lt;/code&gt;) or the trait bound system (e.g., &lt;code&gt;fn_name&amp;lt;T: TraitName + ?Sized&amp;gt;()&lt;/code&gt;). Neither of these lend themselves to keyword &lt;em&gt;generics&lt;/em&gt;. I&#39;d be curious about how this approach would scale to keywords like &lt;code&gt;const&lt;/code&gt;. The Rust userbase is getting larger, too, so I&#39;d be curious about how this approach would get introduced to the stable release. These problems remind me a little bit of a certain postincremented language.&lt;/p&gt;
&lt;p&gt;And the language is already &lt;em&gt;really&lt;/em&gt; gnarly in its syntax. This snippet would kill a programmer from the 80s, and it&#39;s not even using lifetime bounds to their full extent:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rs&quot;&gt;/// This is a comment that has special meaning.
#[derive(Debug, Deserialize)]
#[serde(rename_all(deserialize = &amp;quot;kebab-case&amp;quot;))]
struct Thing&amp;lt;&#39;a, T&amp;gt; {
  /// This one, too
  on_loan: &amp;amp;&#39;a T,
}

impl&amp;lt;&#39;a, T&amp;gt; Thing&amp;lt;&#39;a, T&amp;gt;
  where T: Clone + Into&amp;lt;String&amp;gt;
{
  pub async fn use_thing(thing_one: &amp;amp;mut Thing&amp;lt;&#39;a, T&amp;gt;) -&amp;gt; String {
    thing_one.on_loan.clone().into()
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I realize this is an unfair observation. Any language can look gnarly when you&#39;re fishing for an example of how incomprehensible it can be. But, in the case of Rust, it can be pretty easy to find said examples. In any case, I&#39;m not sure where I&#39;m going with this one other than &amp;quot;it seems like learning Rust as a complete beginner is only going to get harder and harder going forward,&amp;quot; and, &amp;quot;I hope Rust doesn&#39;t evolve into the very thing it sought to destroy&amp;quot;.&lt;/p&gt;
&lt;p&gt;And with that, I&#39;ll leave the reader with some interesting reads on Rust&#39;s function coloring problem that can be readily organized into the &lt;a href=&quot;https://www.washington.edu/counseling/2020/06/08/the-stages-of-grief-accepting-the-unacceptable/&quot;&gt;five stages of grief&lt;/a&gt;, ignoring their dates of publication:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Denial, &amp;quot;Rust&#39;s async isn&#39;t colored!&amp;quot;: &lt;a href=&quot;https://www.hobofan.com/blog/2021-03-10-rust-async-colored/&quot;&gt;https://www.hobofan.com/blog/2021-03-10-rust-async-colored/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Anger, critique of async Rust: &lt;a href=&quot;https://eta.st/2017/08/04/async-rust.html&quot;&gt;https://eta.st/2017/08/04/async-rust.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Bargaining, &amp;quot;Colored functions are good, actually&amp;quot;: &lt;a href=&quot;https://www.thecodedmessage.com/posts/async-colors/&quot;&gt;https://www.thecodedmessage.com/posts/async-colors/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Depression, a follow-up to said critique: &lt;a href=&quot;https://eta.st/2021/03/08/async-rust-2.html&quot;&gt;https://eta.st/2021/03/08/async-rust-2.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Acceptance, &amp;quot;Rust&#39;s async is colored, and that&#39;s okay&amp;quot;: &lt;a href=&quot;https://morestina.net/blog/1686/rust-async-is-colored&quot;&gt;https://morestina.net/blog/1686/rust-async-is-colored&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
  </entry>
  <entry>
    <title>Fish rocks</title>
    <link href="https://krashanoff.com/2023/04/29/fish-rocks/"/>
    <updated>2023-04-29T10:13:00Z</updated>
    <id>https://krashanoff.com/2023/04/29/fish-rocks/</id>
    <content xml:lang="en" type="html">&lt;p&gt;&amp;quot;The command line is a programmer&#39;s home&amp;quot;, or so they say.&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://krashanoff.com/2023/04/29/fish-rocks/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt; I find much truth in this. In the average work day, I probably spend a solid hour or two in the command line building stuff, troubleshooting stuff, or reorganizing stuff. There&#39;s nice clients for Git, but I think that it&#39;s easier to work with Git through the command line in most cases. I use my VSCode debugger usually, but when I was a student I loved nothing more than GDB. And for a sysadmin, you are &lt;em&gt;always&lt;/em&gt; in the terminal. While I&#39;m not a sysadmin, lately, I&#39;ve been working more and more with Kubernetes. That means I spend &lt;em&gt;even more&lt;/em&gt; time in the terminal.&lt;/p&gt;
&lt;p&gt;For a long while, I used Zsh, which I didn&#39;t know was short for &amp;quot;Z Shell&amp;quot; until a few years ago. Zsh is good because:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It is reverse-compatible with Bash&lt;/li&gt;
&lt;li&gt;It has good scripting extensions to Bash&lt;/li&gt;
&lt;li&gt;It has a huge community behind it&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Most of the customizations for one&#39;s shell come in the form of community extensions like &lt;code&gt;oh-my-zsh&lt;/code&gt;. These extensions will give you a custom prompt, autocomplete, better history, etc. They all work beautifully, but as you tack on more extensions, the terminal tends to get bogged down. Some of them also require external dependencies, like &lt;code&gt;fzf&lt;/code&gt;. I remember on my old Arch system I&#39;d tack on tons and tons of little extensions to make it look really pretty, but the prompt would take like 250-500ms to draw.&lt;/p&gt;
&lt;p&gt;External dependencies are taken to the extreme when you start looking at projects like &lt;a href=&quot;https://starship.rs/&quot;&gt;Starship&lt;/a&gt;, which is a wonderful piece of software, but solves the shell customization problem by introducing a full program that&#39;s called every single time you want to render your prompt instead of just a script. There is a clear advantage, though. If you operate across different shells in your day-to-day, then having the exact same prompt in all of them can be handy. Personally, I think Starship is the only livable way to use stock Bash without having an anxiety attack.&lt;/p&gt;
&lt;p&gt;But this is &lt;em&gt;my&lt;/em&gt; laptop. I don&#39;t have to use Bash.&lt;/p&gt;
&lt;p&gt;If you&#39;re okay with sacrificing POSIX-compatibility, &lt;a href=&quot;https://fishshell.com/&quot;&gt;Fish&lt;/a&gt; packs more out of the box than most shells provide through their community packages. It has autocomplete that it parses from your manpages, nice syntax highlighting while writing scripts, and a neat system of events and event handlers. And, since it&#39;s all built into the shell itself, there&#39;s no scripting overhead. As cool as my 2016 Zsh was, I think my Fish shell is 25x faster and generally more ergonomic.&lt;/p&gt;
&lt;p&gt;When I was getting started, I never really used Fish functions for more than just a few tweaks to commands that I always use, like swapping out &lt;code&gt;ls&lt;/code&gt; for &lt;code&gt;exa&lt;/code&gt;, or setting persistent options in other comamnds. I was already happy with the built-in autocomplete and prompts, and didn&#39;t have want for much else. Where things really clicked, though, was when I started using Kubernetes.&lt;/p&gt;
&lt;p&gt;If you&#39;re unfamiliar with Kubernetes, the driving program behind it all is &lt;code&gt;kubectl&lt;/code&gt;, which is so obtuse and option-rich that there are projects that programmatically generate hundreds of aliases just for all its features!&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://krashanoff.com/2023/04/29/fish-rocks/#fn2&quot; id=&quot;fnref2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt; They are supremely useful.&lt;/p&gt;
&lt;p&gt;While they are generated as aliases in other shells, in Fish they are generated as &lt;em&gt;abbreviations&lt;/em&gt;, which are sort of like aliases with superpowers. When typing out the start of an abbreviation, one can tab-complete to see all the possible paths that could be taken. For example, if I type &#39;k&#39; and then press tab:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;➜ leo@mydevice:whoami git:(==main) k6 run --help
k                                                       (Abbreviation: kubectl)
k6                                                               (command link)
ka                                 (Abbreviation: kubectl apply --recursive -f)
kadmin                                                                (command)
kadmin.local                                                          (command)
kak                                            (Abbreviation: kubectl apply -k)
kbxutil                                                          (command link)
kcc                                                                   (command)
kcditto                                                               (command)
kd                                             (Abbreviation: kubectl describe)
kdall                         (Abbreviation: kubectl describe --all-namespaces)
kdcm                                 (Abbreviation: kubectl describe configmap)
kdcmall             (Abbreviation: kubectl describe configmap --all-namespaces)
kdcml                             (Abbreviation: kubectl describe configmap -l)
kdcmn                    (Abbreviation: kubectl describe configmap --namespace)
kdcsetup                                                              (command)
kddep                               (Abbreviation: kubectl describe deployment)
kddepall           (Abbreviation: kubectl describe deployment --all-namespaces)
kddepl                           (Abbreviation: kubectl describe deployment -l)
kddepn                  (Abbreviation: kubectl describe deployment --namespace)
kdestroy                                                              (command)
kdf                             (Abbreviation: kubectl describe --recursive -f)
kding                                  (Abbreviation: kubectl describe ingress)
kdingall              (Abbreviation: kubectl describe ingress --all-namespaces)
…and 1265 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;How handy! I can see all of the different possible expansions that could be achieved from just the letter &lt;code&gt;k&lt;/code&gt; without having to keep a printout on my desk.&lt;/p&gt;
&lt;p&gt;Another two concepts that pervade most of your regular use are contexts and namespaces. You can think of contexts as a particular set of credentials you&#39;re using or a role you&#39;re assuming, and you can think of a namespace as a collection of objects. Often times, you&#39;ll need to switch between contexts and namespaces on the fly. Say, switching between your production and staging environments. This happens so often that there are two community-backed commands - &lt;code&gt;kubectx&lt;/code&gt; and &lt;code&gt;kubens&lt;/code&gt; - that handle the switching for you respectively.&lt;/p&gt;
&lt;p&gt;Having a ton of aliases for &lt;code&gt;kubectl&lt;/code&gt; is useful, sure, but what would really save me some keystrokes is if I had my context and namespace information available to me at all times. Enter: events and event handlers.&lt;/p&gt;
&lt;p&gt;If we know the path to &lt;code&gt;kubectx&lt;/code&gt; and &lt;code&gt;kubens&lt;/code&gt; on our systems (i.e., &lt;code&gt;which kubectx&lt;/code&gt;), we can wrap them with a function that does a little something extra. For example, we can make it emit an event that the function was run:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fish&quot;&gt;function kubectx
  /path/to/kubectx $argv
  emit kube_change
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;...and have that event &lt;em&gt;handled&lt;/em&gt; by another function to update a file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fish&quot;&gt;function handle_kube_change --on-event kube_change
  echo (kubectx -c) &amp;gt; $HOME/.kube_currentctx
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This happens asynchronously in the current terminal process, meaning that we can put the contents of the file into our prompt without fear of a strange halt every time after we run a command while we wait for the next prompt to get populated:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo -ns &amp;quot;Current context: (cat $HOME/.kube_currentctx)&amp;quot;
echo -ns &amp;quot;Current namespace: (cat $HOME/.kube_currentns)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But that lack of POSIX-compatibility is a real zinger. Most people lean on it quite a bit. From regular use, I&#39;ve only really had issue with it in two common cases:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Wildcard expansion&lt;/li&gt;
&lt;li&gt;Version managers&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The rest of the cases I&#39;ve seen are solved by just keeping &lt;code&gt;bash&lt;/code&gt; installed on my system. Unless the script needs to export variables, I&#39;m usually pretty set.&lt;/p&gt;
&lt;p&gt;These two cases are pretty easy to dodge, though. For wildcard expansion, you just have to remember that if you want to literally pass a &lt;code&gt;*&lt;/code&gt;, the argument should be quoted somehow. And for version managers, you really don&#39;t need a POSIX-compliant one. &lt;code&gt;nvm&lt;/code&gt; and &lt;code&gt;gvm&lt;/code&gt; are great, sure, but I have been using &lt;a href=&quot;https://asdf-vm.com/&quot;&gt;&lt;code&gt;asdf&lt;/code&gt;&lt;/a&gt; without any issue. Environment files can be kind of annoying since the syntax is varied, but there are some one-liners you can use to dodge problems there, too.&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://krashanoff.com/2023/04/29/fish-rocks/#fn3&quot; id=&quot;fnref3&quot;&gt;[3]&lt;/a&gt;&lt;/sup&gt; Keeping things home-grown and in my pocket has afforded me a life free of &lt;a href=&quot;https://github.com/edc/bass&quot;&gt;&lt;code&gt;bass&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;POSIX-irreverant shells are on the up-and-up. &lt;a href=&quot;https://github.com/PowerShell/PowerShell&quot;&gt;PowerShell&lt;/a&gt; sees use in build systems and powerful scripts, &lt;a href=&quot;https://www.nushell.sh/&quot;&gt;Nushell&lt;/a&gt; provides a fancy new way of working with tabular data in the shell, and &lt;a href=&quot;http://www.oilshell.org/blog/2020/01/simplest-explanation.html&quot;&gt;Oil&lt;/a&gt; seems to be bridging the gap.&lt;/p&gt;
&lt;p&gt;Anyways, Bash and Zsh will always have a special place in my heart and their hands in a strangle hold around my neck, but Fish is pretty cool.&lt;/p&gt;
&lt;hr class=&quot;footnotes-sep&quot; /&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;No one says this. &lt;a href=&quot;https://krashanoff.com/2023/04/29/fish-rocks/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn2&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ahmetb/kubectl-aliases&quot;&gt;https://github.com/ahmetb/kubectl-aliases&lt;/a&gt; &lt;a href=&quot;https://krashanoff.com/2023/04/29/fish-rocks/#fnref2&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn3&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;I&#39;ve used this function to much success with a little tweaking: &lt;a href=&quot;https://gist.github.com/nikoheikkila/dd4357a178c8679411566ba2ca280fcc&quot;&gt;https://gist.github.com/nikoheikkila/dd4357a178c8679411566ba2ca280fcc&lt;/a&gt; &lt;a href=&quot;https://krashanoff.com/2023/04/29/fish-rocks/#fnref3&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
  </entry>
  <entry>
    <title>Release Your &quot;Open&quot; &quot;Source&quot;</title>
    <link href="https://krashanoff.com/2023/06/20/release-your-open-source/"/>
    <updated>2023-06-20T05:19:00Z</updated>
    <id>https://krashanoff.com/2023/06/20/release-your-open-source/</id>
    <content xml:lang="en" type="html">&lt;p&gt;I&#39;ve seen a few repos lately on GitHub that function as no more than an advertisement for a closed-source project that&#39;s still in heavy development. What&#39;s up with that?&lt;/p&gt;
&lt;p&gt;I was originally writing a post talking about this one project, &lt;a href=&quot;https://www.warp.dev/&quot;&gt;Warp&lt;/a&gt;, which is supposed to be a terminal editor. It was one of those &amp;quot;solution looking for a problem&amp;quot; situations. It was just another terminal emulator, but with Internet connectivity, telemetry, and AI for some reason. They tried to justify it with this other bit where you could track shell commands and output as blocks, but they didn&#39;t integrate the terminal tightly enough with the shell to capture output perfectly. This system design-level problem kept biting them in the ass, and they had to shell out to a wrapper they placed around Bash to make sure their tracking worked through SSH.&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://krashanoff.com/2023/06/20/release-your-open-source/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Ignoring this, it&#39;s a good idea on paper. I wouldn&#39;t be talking about it so vehemently if the project didn&#39;t &lt;em&gt;release an empty GitHub repository with some vague promises of open-sourcing parts of the app later.&lt;/em&gt; Oh, but don&#39;t worry! We have a discussion thread in the empty repo where we will openly posit about the best way of making money.&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://krashanoff.com/2023/06/20/release-your-open-source/#fn2&quot; id=&quot;fnref2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;There&#39;s another project that went and did the same thing recently: a programming language, &lt;a href=&quot;https://www.modular.com/mojo&quot;&gt;Mojo&lt;/a&gt;. They&#39;re looking to provide a new programming language for bridging low-level performance and Python&#39;s ubiquity in data science. Oh, and it&#39;s again supposedly faster than C.&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://krashanoff.com/2023/06/20/release-your-open-source/#fn3&quot; id=&quot;fnref3&quot;&gt;[3]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Again - pretty good idea on paper - but please... Just open source the project or release a beta product, don&#39;t give me this &amp;quot;empty repo&amp;quot; business just so people can use incomplete closed-source software, and publicize &lt;a href=&quot;https://github.com/modularml/mojo/issues/27&quot;&gt;all&lt;/a&gt; &lt;a href=&quot;https://github.com/modularml/mojo/issues/232&quot;&gt;the&lt;/a&gt; &lt;a href=&quot;https://github.com/modularml/mojo/issues/12&quot;&gt;bug&lt;/a&gt; &lt;a href=&quot;https://github.com/modularml/mojo/issues/15&quot;&gt;reports&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I think part of it is also a popularity contest. I feel like ragging on &lt;a href=&quot;https://xeiaso.net/blog/series/v&quot;&gt;&amp;quot;The V Incident&amp;quot;&lt;/a&gt; today is just beating a dead horse, but it does have some merit as a case study in how unfinished novel ideas will try to draw attention to drive their project across the finish line.&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://krashanoff.com/2023/06/20/release-your-open-source/#fn4&quot; id=&quot;fnref4&quot;&gt;[4]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;I look at these projects, then I look at something like Aseprite, or Bitwarden. Aseprite did it right, in that their source is open, but end-users can purchase a pre-built copy. For Bitwarden, they paywall some extra features. This model doesn&#39;t really work for developer tooling and programming languages, since your target market is able to build it from source.&lt;/p&gt;
&lt;p&gt;I am skeptical that people will genuinely pay per-head-per-month licensing fees for something as fundamental and system-critical as a terminal emulator (with telemetry) or a programming language&#39;s engine, though.&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://krashanoff.com/2023/06/20/release-your-open-source/#fn5&quot; id=&quot;fnref5&quot;&gt;[5]&lt;/a&gt;&lt;/sup&gt; It seems too great an organizational risk -- what if the startup with the keys to the castle goes bust? Then again, MATLAB exists. Anyways, please stop this trend of publishing an empty GitHub repo as an advertisement for an unfinished product.&lt;/p&gt;
&lt;hr class=&quot;footnotes-sep&quot; /&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://docs.warp.dev/help/known-issues#ssh&quot;&gt;https://docs.warp.dev/help/known-issues#ssh&lt;/a&gt; &lt;a href=&quot;https://krashanoff.com/2023/06/20/release-your-open-source/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn2&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/warpdotdev/Warp/discussions/400&quot;&gt;https://github.com/warpdotdev/Warp/discussions/400&lt;/a&gt; &lt;a href=&quot;https://krashanoff.com/2023/06/20/release-your-open-source/#fnref2&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn3&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;This one really gets me fired up. Every new programming language I see is faster than C because &amp;quot;we use LLVM and this particular test case worked really well&amp;quot;. It&#39;s practically a free claim. In any case, the claim is on their docs landing: &lt;a href=&quot;https://docs.modular.com/mojo/&quot;&gt;https://docs.modular.com/mojo/&lt;/a&gt; &lt;a href=&quot;https://krashanoff.com/2023/06/20/release-your-open-source/#fnref3&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn4&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;There is actual work being done on the project, and it ended up growing a little bit more into its claims. &lt;a href=&quot;https://krashanoff.com/2023/06/20/release-your-open-source/#fnref4&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn5&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;Eh, maybe I&#39;m wrong though. &lt;a href=&quot;https://github.com/warpdotdev/Warp/discussions/400#discussioncomment-1938429&quot;&gt;https://github.com/warpdotdev/Warp/discussions/400#discussioncomment-1938429&lt;/a&gt; &lt;a href=&quot;https://krashanoff.com/2023/06/20/release-your-open-source/#fnref5&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
  </entry>
</feed>
